import { Root } from 'mdast';
import { Plugin } from 'unified';
import { VFile as VFile$1 } from 'vfile';

interface DataMap {
    astro: {
        frontmatter: Record<string, unknown>;
    };
}
type VFile = VFile$1 & {
    data: Record<string, unknown> & DataMap;
};

/**
 * Transformer interface that must be implemented by addons.
 *
 * @param root root of the MDX AST
 * @param file VFile including frontmatter at `data.astro.frontmatter`
 */
type AddOn = (root: Root, file: VFile) => void | Root | Promise<void | Root>;
/**
 * Options for plugin astro-m2dx, for details see
 * https://astro-m2dx.netlify.app/options
 */
type Options = Partial<{
    /**
     * Apply any custom transformations to the MDAST.
     *
     * All transformations are executed after all internal astro-m2dx
     * transformations.
     *
     * - default: none
     * - Set of transformer functions
     */
    addOns: AddOn[];
    /**
     * Add imports for known JSX components in MDX files automatically.
     *
     * - default: `false`, no components are imported automatically
     * - `true`, to enable automatic imports from files with name
     *   `_autoimports.ts`
     * - `<name>`, to find automatic imports in files named `<name>`
     *
     * These files should be simple JavaScript/ESM files (i.e. ES >=6).
     */
    autoImports: boolean | string;
    /**
     * Fail if unresolved components cannot be resolved by autoImports.
     *
     * - default: `false`
     * - `true` to throw an error on unresolved components
     */
    autoImportsFailUnresolved: boolean;
    /**
     * Map generic markdown directives to JSX components.
     *
     * - default: `false`, no directives are mapped to components
     * - `true`, to enable mapping directives to components according to files
     *   with name `_directives.ts`
     * - `<name>`, to find directive mappings in files named `<name>`
     *
     * These files should be simple JavaScript/ESM files (i.e. ES >=6).
     */
    componentDirectives: boolean | string;
    /**
     * Merge ESM component mapping-files into the exported `components` object
     * of MDX files.
     *
     * - default: `false`, no component mapping is merged
     * - `true`, to enable component mapping merging from files with name
     *   `_components.ts`
     * - `<name>`, to find component mapping-files with `<name>`
     */
    exportComponents: boolean | string;
    /**
     * Merge YAML frontmatter files into the frontmatter of MDX files.
     *
     * The merge is only applied after all file-specific frontmatter items have
     * been added. These will not be overwritten.
     *
     * - default: `false`, no frontmatter is merged
     * - `true`, to enable frontmatter merging from files with name
     *   `_frontmatter.yaml` and without resolving relative paths
     * - `<name>`, to find frontmatter in YAML files named `<name>`
     * - { name?: string, resolvePaths: true }, to resolve relative paths from
     *   the merged frontmatter file with respect to that file
     */
    frontmatter: boolean | string | {
        name?: string;
        resolvePaths?: boolean;
    };
    /**
     * Assign identifiers to all images in the document
     *
     * - default: `false`, no identifiers are assigned
     * - `true`, identifiers are assigned with the default prefix `img_` followed
     *   by a hash value
     * - `<prefix>: string`, identifiers use the prefix `<prefix>` followed by a
     *   hash value
     */
    identifyImages: boolean | string;
    /**
     * Include other MDX files in your MDX file with a
     * `::include[./partial.mdx]` directive
     *
     * - default: `false`
     * - `true`, to enable this directive with the name `::include`
     * - `<name>`, to enable the directive with name `::<name>[./ref.mdx]`
     */
    includeDirective: boolean | string;
    /**
     * Inject the MD AST into the frontmatter.
     *
     * > NOTE: The injected tree is not read by the HTML generation,
     *   so manipulation does not make sense.
     *
     * - default: `false`
     * - `true`, to have it injected into property `mdast`
     * - `<name>`, to have it injected as property `<name>`
     */
    mdast: boolean | string;
    /**
     * Normalize relative paths in MDX file.
     *
     * - default: `false`
     * - `true`, to have relative paths normalized with default settings
     *   (see below)
     * - `{...}`, use the options object to configure individual settings
     *   - withFrontmatter: boolean, default = true, whether to normalize paths
     *     in frontmatter
     *   - rebase: string, default = `undefined` (i.e. resulting paths will be
     *     absolute), path to use as new base and make all resulting paths
     *     relative
     *   - checkExistence: boolean, default = true, normalize path only, if
     *     normalized path exists, leave untouched otherwise
     *   - includeOnly: list of MDX element types or JSX tags (if put in angle
     *     brackets, e.g. `<img>`) to include during path normalization
     *     (only the named types will be included)
     *   - exclude: list of MDX element types or JSX tags (if put in angle
     *     brackets, e.g. `<img>`) to include during path normalization
     *   - exclude: list of MDX element types to exclude during path
     *     (e.g. `['link', '<a>']` to exclude markdown links and JSX anchor tags)
     *
     * > NOTE: If you want to use this feature together with relativeImages, you
     *         must exclude the node type `image`.
     */
    normalizePaths: boolean | string | {
        withFrontmatter?: boolean;
        rebase?: string;
        checkExistence?: boolean;
        includeOnly?: string[];
        exclude?: string[];
    };
    /**
     * Inject the raw MDX into the frontmatter.
     *
     * - default: `false`
     * - `true`, to have it injected into property `rawmdx`
     * - `<name>`, to have it injected as property `<name>`
     */
    rawmdx: boolean | string;
    /**
     * Resolve relative image references in MDX files.
     *
     * - default: `false`
     * - `true`, to enable relative image resolution
     */
    relativeImages: boolean;
    /**
     * Scan the content for the abstract and inject it into the frontmatter.
     *
     * The abstract will be taken from the content between the title and the next
     * heading. The content is converted to text.
     *
     * - default: `false`
     * - `true`, to have it injected into property `abstract`
     * - `<name>`, to have it injected as property `<name>`
     *
     * If the file's frontmatter already has a property with that name, it will
     * **NOT** be overwritten. However, the scanned abstract has precedence over
     * a property from merged frontmatter.
     */
    scanAbstract: boolean | string;
    /**
     * Scan the content for the title and inject it into the frontmatter.
     *
     * The title will be taken from the first heading with depth=1,
     * i.e. the first line `# My Title`.
     *
     * - default: `false`
     * - `true`, to have it injected into property `title`
     * - `<name>`, to have it injected as property `<name>`
     *
     * If the file's frontmatter already has a property with that name, it will
     * **NOT** be overwritten. However, the scanned title has precedence over
     * a property from merged frontmatter.
     */
    scanTitle: boolean | string;
    /**
     * Allow style directives in markdown.
     *
     * Style directives allow you to mix some style hints into your markdown, by
     * applying CSS classes to elements. Style directives come in all three
     * directive forms: block, leaf and text.
     *
     * - The block form creates a containg div, carrying the declared CSS classes
     * - The leaf form applies the class to either it's content (given in
     *   [square braces], which will be wrapped in a `<div>`) or it's containing
     *   parent element
     * - The text form works the same as the leaf form, except that is used
     *   inside paragraphs and it's content is wrapped in a `<span>`
     *
     * - default: `false`
     * - `true`, to enable default style directives `::style` and `::list-style`
     * - `<name>`, to enable style directives with custom name `::<name>` and
     *   `::list-<name>`
     */
    styleDirectives: boolean | string;
    /**
     * Unwrap stand-alone images from paragraph
     *
     * - default: `false`
     * - `true`, remove wrapping paragraph element around stand-alone images.
     */
    unwrapImages: boolean;
}>;
/**
 *  Astro MÂ²DX Plugin
 *
 * @param options For configuration options, see https://astro-m2dx.netlify.app/options
 * @returns transformer function
 */
declare const plugin: Plugin<[Options], unknown>;

export { AddOn, DataMap, Options, VFile, plugin as default, plugin };
