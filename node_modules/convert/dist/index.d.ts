declare type AllValues = {
    [Unit in keyof Units]: {
        unit: Unit;
        family: Units[Unit][Indexes.Conversion.Family];
    };
}[keyof Units];

/**
 * Valid angle units.
 * @public
 */
export declare type Angle = GetAliases<_ConversionFamilyId.Angle>;

/**
 * Valid area units.
 * @public
 */
export declare type Area = GetAliases<_ConversionFamilyId.Area>;

/** @public */
declare const enum Best {
    Value = 0,
    Sym = 1
}

declare namespace Best_2 {
    export {
        Kind
    }
}

/**
 * The return value from converting a unit to `'best'`.
 * @public
 */
export declare type _BestConversion<Q extends number | bigint, U extends BestUnits> = {
    /**
     * The quantity of the unit.
     */
    quantity: SimplifyQuantity<Q>;
    /** The unit. */
    unit: U;
    /**
     * Join the quantity and the unit together in a string.
     * This method is automatically called when casting this object to a string, meaning you can safely do things like concatenate the object with a string.
     *
     * @param toFixed - The number of decimal places to include in the string.
     * The result will be padded with zeros if necessary.
     * Providing `undefined` will use the original number of decimal places.
     * Providing `0` will round the number to the nearest integer.
     * This option is ignored when converting `bigint`s.
     */
    toString(toFixed?: number): `${SimplifyQuantity<Q>}${U}`;
};

/**
 * A type for the units possible when converting to "best".
 *
 * @public
 */
export declare type BestUnits<Family extends _ConversionFamilyId = _ConversionFamilyId, Kind extends Best_2.Kind = Best_2.Kind> = (typeof bestUnits)[Kind][Family][number][Indexes.Best.Sym];

declare const bestUnits: {
    readonly imperial: readonly [readonly [readonly [1, "deg"]], readonly [readonly [1, "sq in"], readonly [144, "sq ft"], readonly [6272640, "ac"], readonly [4014489600, "sq mi"]], readonly [readonly [1, "bits"], readonly [8, "B"], readonly [8192, "KiB"], readonly [8388608, "MiB"], readonly [8589934592, "GiB"], readonly [8796093022208, "TiB"], readonly [9007199254740992, "PiB"]], readonly [readonly [1, "J"]], readonly [readonly [1, "lbf"]], readonly [readonly [1, "in"], readonly [12, "ft"], readonly [36, "yd"], readonly [63360, "mi"]], readonly [readonly [1, "oz"], readonly [16, "lb"]], readonly [readonly [1, "W"], readonly [1000, "kW"], readonly [1000000, "MW"], readonly [1000000000, "GW"], readonly [1000000000000, "TW"], readonly [1000000000000000, "PW"]], readonly [readonly [1, "psi"]], readonly [readonly [1, "F"]], readonly [readonly [1, "fs"], readonly [1000, "ps"], readonly [1000000, "ns"], readonly [1000000000, "µs"], readonly [1000000000000, "ms"], readonly [1000000000000000, "s"], readonly [60000000000000000, "min"], readonly [3600000000000000000, "h"], readonly [86400000000000000000, "d"], readonly [3.1536e+22, "y"]], readonly [readonly [1, "tsp"], readonly [3, "tbsp"], readonly [6, "fl oz"], readonly [48, "cup"], readonly [96, "pt"], readonly [192, "qt"], readonly [768, "gal"]]];
    readonly metric: readonly [readonly [readonly [1, "deg"]], readonly [readonly [1, "mm2"], readonly [100, "cm2"], readonly [1000000, "m2"], readonly [1000000000000, "km2"]], readonly [readonly [1, "bits"], readonly [8, "B"], readonly [8000, "KB"], readonly [8000000, "MB"], readonly [8000000000, "GB"], readonly [8000000000000, "TB"], readonly [8000000000000000, "PB"]], readonly [readonly [1, "J"]], readonly [readonly [1, "N"]], readonly [readonly [1, "mm"], readonly [10, "cm"], readonly [1000, "m"], readonly [1000000, "km"]], readonly [readonly [1, "mg"], readonly [1000, "g"], readonly [1000000, "kg"]], readonly [readonly [1, "W"], readonly [1000, "kW"], readonly [1000000, "MW"], readonly [1000000000, "GW"], readonly [1000000000000, "TW"], readonly [1000000000000000, "PW"]], readonly [readonly [1, "Pa"]], readonly [readonly [1, "C"]], readonly [readonly [1, "fs"], readonly [1000, "ps"], readonly [1000000, "ns"], readonly [1000000000, "µs"], readonly [1000000000000, "ms"], readonly [1000000000000000, "s"], readonly [60000000000000000, "min"], readonly [3600000000000000000, "h"], readonly [86400000000000000000, "d"], readonly [3.1536e+22, "y"]], readonly [readonly [1, "mL"], readonly [1000, "L"]]];
};

/** @public */
declare const enum Conversion {
    Family = 0,
    Ratio = 1
}

/**
 * IDs for conversion families.
 * @public
 */
export declare const enum _ConversionFamilyId {
    Angle = 0,
    Area = 1,
    Data = 2,
    Energy = 3,
    Force = 4,
    Length = 5,
    Mass = 6,
    Power = 7,
    Pressure = 8,
    Temperature = 9,
    Time = 10,
    Volume = 11
}

declare const conversions: {
    readonly __proto__: null;
    readonly radian: readonly [0, 1];
    readonly radians: readonly [0, 1];
    readonly rad: readonly [0, 1];
    readonly rads: readonly [0, 1];
    readonly r: readonly [0, 1];
    readonly turn: readonly [0, 6.283185307179586];
    readonly turns: readonly [0, 6.283185307179586];
    readonly degree: readonly [0, 0.017453292519943295];
    readonly degrees: readonly [0, 0.017453292519943295];
    readonly deg: readonly [0, 0.017453292519943295];
    readonly degs: readonly [0, 0.017453292519943295];
    readonly '\u00B0': readonly [0, 0.017453292519943295];
    readonly gradian: readonly [0, 0.015707963267948967];
    readonly gradians: readonly [0, 0.015707963267948967];
    readonly gon: readonly [0, 0.015707963267948967];
    readonly gons: readonly [0, 0.015707963267948967];
    readonly grad: readonly [0, 0.015707963267948967];
    readonly grads: readonly [0, 0.015707963267948967];
    readonly grade: readonly [0, 0.015707963267948967];
    readonly grades: readonly [0, 0.015707963267948967];
    readonly 'square meter': readonly [1, 1];
    readonly 'square meters': readonly [1, 1];
    readonly 'square metre': readonly [1, 1];
    readonly 'square metres': readonly [1, 1];
    readonly 'm\u00B2': readonly [1, 1];
    readonly m2: readonly [1, 1];
    readonly 'square petameter': readonly [1, 1e+30];
    readonly 'square petametre': readonly [1, 1e+30];
    readonly 'square petameters': readonly [1, 1e+30];
    readonly 'square petametres': readonly [1, 1e+30];
    readonly 'Pm\u00B2': readonly [1, 1e+30];
    readonly Pm2: readonly [1, 1e+30];
    readonly 'square terameter': readonly [1, 1e+24];
    readonly 'square terametre': readonly [1, 1e+24];
    readonly 'square terameters': readonly [1, 1e+24];
    readonly 'square terametres': readonly [1, 1e+24];
    readonly 'Tm\u00B2': readonly [1, 1e+24];
    readonly Tm2: readonly [1, 1e+24];
    readonly 'square gigameter': readonly [1, 1000000000000000000];
    readonly 'square gigametre': readonly [1, 1000000000000000000];
    readonly 'square gigameters': readonly [1, 1000000000000000000];
    readonly 'square gigametres': readonly [1, 1000000000000000000];
    readonly 'Gm\u00B2': readonly [1, 1000000000000000000];
    readonly Gm2: readonly [1, 1000000000000000000];
    readonly 'square megameter': readonly [1, 1000000000000];
    readonly 'square megametre': readonly [1, 1000000000000];
    readonly 'square megameters': readonly [1, 1000000000000];
    readonly 'square megametres': readonly [1, 1000000000000];
    readonly 'Mm\u00B2': readonly [1, 1000000000000];
    readonly Mm2: readonly [1, 1000000000000];
    readonly 'square kilometer': readonly [1, 1000000];
    readonly 'square kilometre': readonly [1, 1000000];
    readonly 'square kilometers': readonly [1, 1000000];
    readonly 'square kilometres': readonly [1, 1000000];
    readonly 'km\u00B2': readonly [1, 1000000];
    readonly km2: readonly [1, 1000000];
    readonly 'square hectometer': readonly [1, 10000];
    readonly 'square hectometre': readonly [1, 10000];
    readonly 'square hectometers': readonly [1, 10000];
    readonly 'square hectometres': readonly [1, 10000];
    readonly 'hm\u00B2': readonly [1, 10000];
    readonly hm2: readonly [1, 10000];
    readonly 'square decameter': readonly [1, 100];
    readonly 'square decametre': readonly [1, 100];
    readonly 'square decameters': readonly [1, 100];
    readonly 'square decametres': readonly [1, 100];
    readonly 'dam\u00B2': readonly [1, 100];
    readonly dam2: readonly [1, 100];
    readonly 'square decimeter': readonly [1, 0.1];
    readonly 'square decimetre': readonly [1, 0.1];
    readonly 'square decimeters': readonly [1, 0.1];
    readonly 'square decimetres': readonly [1, 0.1];
    readonly 'dm\u00B2': readonly [1, 0.1];
    readonly dm2: readonly [1, 0.1];
    readonly 'square centimeter': readonly [1, 0.0001];
    readonly 'square centimetre': readonly [1, 0.0001];
    readonly 'square centimeters': readonly [1, 0.0001];
    readonly 'square centimetres': readonly [1, 0.0001];
    readonly 'cm\u00B2': readonly [1, 0.0001];
    readonly cm2: readonly [1, 0.0001];
    readonly 'square millimeter': readonly [1, 0.000001];
    readonly 'square millimetre': readonly [1, 0.000001];
    readonly 'square millimeters': readonly [1, 0.000001];
    readonly 'square millimetres': readonly [1, 0.000001];
    readonly 'mm\u00B2': readonly [1, 0.000001];
    readonly mm2: readonly [1, 0.000001];
    readonly 'square micrometer': readonly [1, 1e-12];
    readonly 'square micrometre': readonly [1, 1e-12];
    readonly 'square micrometers': readonly [1, 1e-12];
    readonly 'square micrometres': readonly [1, 1e-12];
    readonly '\u03BCm\u00B2': readonly [1, 1e-12];
    readonly '\u00B5m\u00B2': readonly [1, 1e-12];
    readonly μm2: readonly [1, 1e-12];
    readonly µm2: readonly [1, 1e-12];
    readonly 'square nanometer': readonly [1, 1e-18];
    readonly 'square nanometre': readonly [1, 1e-18];
    readonly 'square nanometers': readonly [1, 1e-18];
    readonly 'square nanometres': readonly [1, 1e-18];
    readonly 'nm\u00B2': readonly [1, 1e-18];
    readonly nm2: readonly [1, 1e-18];
    readonly 'square picometer': readonly [1, 1e-24];
    readonly 'square picometre': readonly [1, 1e-24];
    readonly 'square picometers': readonly [1, 1e-24];
    readonly 'square picometres': readonly [1, 1e-24];
    readonly 'pm\u00B2': readonly [1, 1e-24];
    readonly pm2: readonly [1, 1e-24];
    readonly 'square femtometer': readonly [1, 1e-30];
    readonly 'square femtometre': readonly [1, 1e-30];
    readonly 'square femtometers': readonly [1, 1e-30];
    readonly 'square femtometres': readonly [1, 1e-30];
    readonly 'fm\u00B2': readonly [1, 1e-30];
    readonly fm2: readonly [1, 1e-30];
    readonly acre: readonly [1, 4046.8564224];
    readonly acres: readonly [1, 4046.8564224];
    readonly ac: readonly [1, 4046.8564224];
    readonly centiare: readonly [1, 1];
    readonly centiares: readonly [1, 1];
    readonly ca: readonly [1, 1];
    readonly deciare: readonly [1, 10];
    readonly deciares: readonly [1, 10];
    readonly da: readonly [1, 10];
    readonly are: readonly [1, 100];
    readonly ares: readonly [1, 100];
    readonly decare: readonly [1, 1000];
    readonly decares: readonly [1, 1000];
    readonly daa: readonly [1, 1000];
    readonly hectare: readonly [1, 10000];
    readonly hectares: readonly [1, 10000];
    readonly ha: readonly [1, 10000];
    readonly 'square foot': readonly [1, 0.09290304];
    readonly 'square feet': readonly [1, 0.09290304];
    readonly 'sq ft': readonly [1, 0.09290304];
    readonly 'ft\u00B2': readonly [1, 0.09290304];
    readonly ft2: readonly [1, 0.09290304];
    readonly 'square inch': readonly [1, 0.00064516];
    readonly 'square inches': readonly [1, 0.00064516];
    readonly 'sq in': readonly [1, 0.00064516];
    readonly 'in\u00B2': readonly [1, 0.00064516];
    readonly in2: readonly [1, 0.00064516];
    readonly 'square yard': readonly [1, 0.83612736];
    readonly 'square yards': readonly [1, 0.83612736];
    readonly 'sq yd': readonly [1, 0.83612736];
    readonly 'yd\u00B2': readonly [1, 0.83612736];
    readonly yd2: readonly [1, 0.83612736];
    readonly 'square mile': readonly [1, 2589988.110336];
    readonly 'square miles': readonly [1, 2589988.110336];
    readonly 'sq mi': readonly [1, 2589988.110336];
    readonly 'mi\u00B2': readonly [1, 2589988.110336];
    readonly mi2: readonly [1, 2589988.110336];
    readonly bit: readonly [2, 1];
    readonly bits: readonly [2, 1];
    readonly b: readonly [2, 1];
    readonly pebibit: readonly [2, 1125899906842624];
    readonly pebibits: readonly [2, 1125899906842624];
    readonly Pib: readonly [2, 1125899906842624];
    readonly tebibit: readonly [2, 1099511627776];
    readonly tebibits: readonly [2, 1099511627776];
    readonly Tib: readonly [2, 1099511627776];
    readonly gibibit: readonly [2, 1073741824];
    readonly gibibits: readonly [2, 1073741824];
    readonly Gib: readonly [2, 1073741824];
    readonly mebibit: readonly [2, 1048576];
    readonly mebibits: readonly [2, 1048576];
    readonly Mib: readonly [2, 1048576];
    readonly kibibit: readonly [2, 1024];
    readonly kibibits: readonly [2, 1024];
    readonly Kib: readonly [2, 1024];
    readonly Kb: readonly [2, 1000];
    readonly KB: readonly [2, 8000];
    readonly petabit: readonly [2, 1000000000000000];
    readonly petabits: readonly [2, 1000000000000000];
    readonly Pb: readonly [2, 1000000000000000];
    readonly terabit: readonly [2, 1000000000000];
    readonly terabits: readonly [2, 1000000000000];
    readonly Tb: readonly [2, 1000000000000];
    readonly gigabit: readonly [2, 1000000000];
    readonly gigabits: readonly [2, 1000000000];
    readonly Gb: readonly [2, 1000000000];
    readonly megabit: readonly [2, 1000000];
    readonly megabits: readonly [2, 1000000];
    readonly Mb: readonly [2, 1000000];
    readonly kilobit: readonly [2, 1000];
    readonly kilobits: readonly [2, 1000];
    readonly kb: readonly [2, 1000];
    readonly hectobit: readonly [2, 100];
    readonly hectobits: readonly [2, 100];
    readonly hb: readonly [2, 100];
    readonly decabit: readonly [2, 10];
    readonly decabits: readonly [2, 10];
    readonly dab: readonly [2, 10];
    readonly decibit: readonly [2, 0.1];
    readonly decibits: readonly [2, 0.1];
    readonly db: readonly [2, 0.1];
    readonly centibit: readonly [2, 0.01];
    readonly centibits: readonly [2, 0.01];
    readonly cb: readonly [2, 0.01];
    readonly millibit: readonly [2, 0.001];
    readonly millibits: readonly [2, 0.001];
    readonly mb: readonly [2, 0.001];
    readonly microbit: readonly [2, 0.000001];
    readonly microbits: readonly [2, 0.000001];
    readonly μb: readonly [2, 0.000001];
    readonly µb: readonly [2, 0.000001];
    readonly nanobit: readonly [2, 1e-9];
    readonly nanobits: readonly [2, 1e-9];
    readonly nb: readonly [2, 1e-9];
    readonly picobit: readonly [2, 1e-12];
    readonly picobits: readonly [2, 1e-12];
    readonly pb: readonly [2, 1e-12];
    readonly femtobit: readonly [2, 1e-15];
    readonly femtobits: readonly [2, 1e-15];
    readonly fb: readonly [2, 1e-15];
    readonly nibble: readonly [2, 4];
    readonly nibbles: readonly [2, 4];
    readonly semioctet: readonly [2, 4];
    readonly semioctets: readonly [2, 4];
    readonly halfbyte: readonly [2, 4];
    readonly halfbytes: readonly [2, 4];
    readonly byte: readonly [2, 8];
    readonly bytes: readonly [2, 8];
    readonly octect: readonly [2, 8];
    readonly octects: readonly [2, 8];
    readonly B: readonly [2, 8];
    readonly pebibyte: readonly [2, 9007199254740992];
    readonly pebibytes: readonly [2, 9007199254740992];
    readonly PiB: readonly [2, 9007199254740992];
    readonly tebibyte: readonly [2, 8796093022208];
    readonly tebibytes: readonly [2, 8796093022208];
    readonly TiB: readonly [2, 8796093022208];
    readonly gibibyte: readonly [2, 8589934592];
    readonly gibibytes: readonly [2, 8589934592];
    readonly GiB: readonly [2, 8589934592];
    readonly mebibyte: readonly [2, 8388608];
    readonly mebibytes: readonly [2, 8388608];
    readonly MiB: readonly [2, 8388608];
    readonly kibibyte: readonly [2, 8192];
    readonly kibibytes: readonly [2, 8192];
    readonly KiB: readonly [2, 8192];
    readonly petabyte: readonly [2, 8000000000000000];
    readonly petabytes: readonly [2, 8000000000000000];
    readonly PB: readonly [2, 8000000000000000];
    readonly terabyte: readonly [2, 8000000000000];
    readonly terabytes: readonly [2, 8000000000000];
    readonly TB: readonly [2, 8000000000000];
    readonly gigabyte: readonly [2, 8000000000];
    readonly gigabytes: readonly [2, 8000000000];
    readonly GB: readonly [2, 8000000000];
    readonly megabyte: readonly [2, 8000000];
    readonly megabytes: readonly [2, 8000000];
    readonly MB: readonly [2, 8000000];
    readonly kilobyte: readonly [2, 8000];
    readonly kilobytes: readonly [2, 8000];
    readonly kB: readonly [2, 8000];
    readonly hectobyte: readonly [2, 800];
    readonly hectobytes: readonly [2, 800];
    readonly hB: readonly [2, 800];
    readonly decabyte: readonly [2, 80];
    readonly decabytes: readonly [2, 80];
    readonly daB: readonly [2, 80];
    readonly decibyte: readonly [2, 0.8];
    readonly decibytes: readonly [2, 0.8];
    readonly dB: readonly [2, 0.8];
    readonly centibyte: readonly [2, 0.08];
    readonly centibytes: readonly [2, 0.08];
    readonly cB: readonly [2, 0.08];
    readonly millibyte: readonly [2, 0.008];
    readonly millibytes: readonly [2, 0.008];
    readonly mB: readonly [2, 0.008];
    readonly microbyte: readonly [2, 0.000008];
    readonly microbytes: readonly [2, 0.000008];
    readonly μB: readonly [2, 0.000008];
    readonly µB: readonly [2, 0.000008];
    readonly nanobyte: readonly [2, 8e-9];
    readonly nanobytes: readonly [2, 8e-9];
    readonly nB: readonly [2, 8e-9];
    readonly picobyte: readonly [2, 8e-12];
    readonly picobytes: readonly [2, 8e-12];
    readonly pB: readonly [2, 8e-12];
    readonly femtobyte: readonly [2, 8e-15];
    readonly femtobytes: readonly [2, 8e-15];
    readonly fB: readonly [2, 8e-15];
    readonly hextet: readonly [2, 16];
    readonly hextets: readonly [2, 16];
    readonly joule: readonly [3, 1];
    readonly joules: readonly [3, 1];
    readonly J: readonly [3, 1];
    readonly petajoule: readonly [3, 1000000000000000];
    readonly petajoules: readonly [3, 1000000000000000];
    readonly PJ: readonly [3, 1000000000000000];
    readonly terajoule: readonly [3, 1000000000000];
    readonly terajoules: readonly [3, 1000000000000];
    readonly TJ: readonly [3, 1000000000000];
    readonly gigajoule: readonly [3, 1000000000];
    readonly gigajoules: readonly [3, 1000000000];
    readonly GJ: readonly [3, 1000000000];
    readonly megajoule: readonly [3, 1000000];
    readonly megajoules: readonly [3, 1000000];
    readonly MJ: readonly [3, 1000000];
    readonly kilojoule: readonly [3, 1000];
    readonly kilojoules: readonly [3, 1000];
    readonly kJ: readonly [3, 1000];
    readonly hectojoule: readonly [3, 100];
    readonly hectojoules: readonly [3, 100];
    readonly hJ: readonly [3, 100];
    readonly decajoule: readonly [3, 10];
    readonly decajoules: readonly [3, 10];
    readonly daJ: readonly [3, 10];
    readonly decijoule: readonly [3, 0.1];
    readonly decijoules: readonly [3, 0.1];
    readonly dJ: readonly [3, 0.1];
    readonly centijoule: readonly [3, 0.01];
    readonly centijoules: readonly [3, 0.01];
    readonly cJ: readonly [3, 0.01];
    readonly millijoule: readonly [3, 0.001];
    readonly millijoules: readonly [3, 0.001];
    readonly mJ: readonly [3, 0.001];
    readonly microjoule: readonly [3, 0.000001];
    readonly microjoules: readonly [3, 0.000001];
    readonly μJ: readonly [3, 0.000001];
    readonly µJ: readonly [3, 0.000001];
    readonly nanojoule: readonly [3, 1e-9];
    readonly nanojoules: readonly [3, 1e-9];
    readonly nJ: readonly [3, 1e-9];
    readonly picojoule: readonly [3, 1e-12];
    readonly picojoules: readonly [3, 1e-12];
    readonly pJ: readonly [3, 1e-12];
    readonly femtojoule: readonly [3, 1e-15];
    readonly femtojoules: readonly [3, 1e-15];
    readonly fJ: readonly [3, 1e-15];
    readonly 'watt-hour': readonly [3, 3600];
    readonly 'W\u22C5h': readonly [3, 3600];
    readonly 'W h': readonly [3, 3600];
    readonly Wh: readonly [3, 3600];
    readonly 'petawatt-hour': readonly [3, 3600000000000000000];
    readonly 'petawatt-hours': readonly [3, 3600000000000000000];
    readonly 'PW\u22C5h': readonly [3, 3600000000000000000];
    readonly 'PW h': readonly [3, 3600000000000000000];
    readonly PWh: readonly [3, 3600000000000000000];
    readonly 'terawatt-hour': readonly [3, 3600000000000000];
    readonly 'terawatt-hours': readonly [3, 3600000000000000];
    readonly 'TW\u22C5h': readonly [3, 3600000000000000];
    readonly 'TW h': readonly [3, 3600000000000000];
    readonly TWh: readonly [3, 3600000000000000];
    readonly 'gigawatt-hour': readonly [3, 3600000000000];
    readonly 'gigawatt-hours': readonly [3, 3600000000000];
    readonly 'GW\u22C5h': readonly [3, 3600000000000];
    readonly 'GW h': readonly [3, 3600000000000];
    readonly GWh: readonly [3, 3600000000000];
    readonly 'megawatt-hour': readonly [3, 3600000000];
    readonly 'megawatt-hours': readonly [3, 3600000000];
    readonly 'MW\u22C5h': readonly [3, 3600000000];
    readonly 'MW h': readonly [3, 3600000000];
    readonly MWh: readonly [3, 3600000000];
    readonly 'kilowatt-hour': readonly [3, 3600000];
    readonly 'kilowatt-hours': readonly [3, 3600000];
    readonly 'kW\u22C5h': readonly [3, 3600000];
    readonly 'kW h': readonly [3, 3600000];
    readonly kWh: readonly [3, 3600000];
    readonly 'hectowatt-hour': readonly [3, 360000];
    readonly 'hectowatt-hours': readonly [3, 360000];
    readonly 'hW\u22C5h': readonly [3, 360000];
    readonly 'hW h': readonly [3, 360000];
    readonly hWh: readonly [3, 360000];
    readonly 'decawatt-hour': readonly [3, 36000];
    readonly 'decawatt-hours': readonly [3, 36000];
    readonly 'daW\u22C5h': readonly [3, 36000];
    readonly 'daW h': readonly [3, 36000];
    readonly daWh: readonly [3, 36000];
    readonly 'deciwatt-hour': readonly [3, 360];
    readonly 'deciwatt-hours': readonly [3, 360];
    readonly 'dW\u22C5h': readonly [3, 360];
    readonly 'dW h': readonly [3, 360];
    readonly dWh: readonly [3, 360];
    readonly 'centiwatt-hour': readonly [3, 36];
    readonly 'centiwatt-hours': readonly [3, 36];
    readonly 'cW\u22C5h': readonly [3, 36];
    readonly 'cW h': readonly [3, 36];
    readonly cWh: readonly [3, 36];
    readonly 'milliwatt-hour': readonly [3, 3.6];
    readonly 'milliwatt-hours': readonly [3, 3.6];
    readonly 'mW\u22C5h': readonly [3, 3.6];
    readonly 'mW h': readonly [3, 3.6];
    readonly mWh: readonly [3, 3.6];
    readonly 'microwatt-hour': readonly [3, 0.0036];
    readonly 'microwatt-hours': readonly [3, 0.0036];
    readonly '\u03BCW\u22C5h': readonly [3, 0.0036];
    readonly '\u00B5W\u22C5h': readonly [3, 0.0036];
    readonly '\u03BCW h': readonly [3, 0.0036];
    readonly '\u00B5W h': readonly [3, 0.0036];
    readonly μWh: readonly [3, 0.0036];
    readonly µWh: readonly [3, 0.0036];
    readonly 'nanowatt-hour': readonly [3, 0.0000036];
    readonly 'nanowatt-hours': readonly [3, 0.0000036];
    readonly 'nW\u22C5h': readonly [3, 0.0000036];
    readonly 'nW h': readonly [3, 0.0000036];
    readonly nWh: readonly [3, 0.0000036];
    readonly 'picowatt-hour': readonly [3, 3.6e-9];
    readonly 'picowatt-hours': readonly [3, 3.6e-9];
    readonly 'pW\u22C5h': readonly [3, 3.6e-9];
    readonly 'pW h': readonly [3, 3.6e-9];
    readonly pWh: readonly [3, 3.6e-9];
    readonly 'femtowatt-hour': readonly [3, 3.6e-12];
    readonly 'femtowatt-hours': readonly [3, 3.6e-12];
    readonly 'fW\u22C5h': readonly [3, 3.6e-12];
    readonly 'fW h': readonly [3, 3.6e-12];
    readonly fWh: readonly [3, 3.6e-12];
    readonly newton: readonly [4, 1];
    readonly newtons: readonly [4, 1];
    readonly N: readonly [4, 1];
    readonly petanewton: readonly [4, 1000000000000000];
    readonly petanewtons: readonly [4, 1000000000000000];
    readonly PN: readonly [4, 1000000000000000];
    readonly teranewton: readonly [4, 1000000000000];
    readonly teranewtons: readonly [4, 1000000000000];
    readonly TN: readonly [4, 1000000000000];
    readonly giganewton: readonly [4, 1000000000];
    readonly giganewtons: readonly [4, 1000000000];
    readonly GN: readonly [4, 1000000000];
    readonly meganewton: readonly [4, 1000000];
    readonly meganewtons: readonly [4, 1000000];
    readonly MN: readonly [4, 1000000];
    readonly kilonewton: readonly [4, 1000];
    readonly kilonewtons: readonly [4, 1000];
    readonly kN: readonly [4, 1000];
    readonly hectonewton: readonly [4, 100];
    readonly hectonewtons: readonly [4, 100];
    readonly hN: readonly [4, 100];
    readonly decanewton: readonly [4, 10];
    readonly decanewtons: readonly [4, 10];
    readonly daN: readonly [4, 10];
    readonly decinewton: readonly [4, 0.1];
    readonly decinewtons: readonly [4, 0.1];
    readonly dN: readonly [4, 0.1];
    readonly centinewton: readonly [4, 0.01];
    readonly centinewtons: readonly [4, 0.01];
    readonly cN: readonly [4, 0.01];
    readonly millinewton: readonly [4, 0.001];
    readonly millinewtons: readonly [4, 0.001];
    readonly mN: readonly [4, 0.001];
    readonly micronewton: readonly [4, 0.000001];
    readonly micronewtons: readonly [4, 0.000001];
    readonly μN: readonly [4, 0.000001];
    readonly µN: readonly [4, 0.000001];
    readonly nanonewton: readonly [4, 1e-9];
    readonly nanonewtons: readonly [4, 1e-9];
    readonly nN: readonly [4, 1e-9];
    readonly piconewton: readonly [4, 1e-12];
    readonly piconewtons: readonly [4, 1e-12];
    readonly pN: readonly [4, 1e-12];
    readonly femtonewton: readonly [4, 1e-15];
    readonly femtonewtons: readonly [4, 1e-15];
    readonly fN: readonly [4, 1e-15];
    readonly dyne: readonly [4, 0.00001];
    readonly dynes: readonly [4, 0.00001];
    readonly dyn: readonly [4, 0.00001];
    readonly 'pound of force': readonly [4, 4.448222];
    readonly 'pound-force': readonly [4, 4.448222];
    readonly lbf: readonly [4, 4.448222];
    readonly kip: readonly [4, 4448.2216];
    readonly klb: readonly [4, 4448.2216];
    readonly kipf: readonly [4, 4448.2216];
    readonly klbf: readonly [4, 4448.2216];
    readonly poundal: readonly [4, 0.138255];
    readonly poundals: readonly [4, 0.138255];
    readonly pdl: readonly [4, 0.138255];
    readonly 'kilogram-force': readonly [4, 9.80665];
    readonly kilopond: readonly [4, 9.80665];
    readonly kiloponds: readonly [4, 9.80665];
    readonly kgf: readonly [4, 9.80665];
    readonly kp: readonly [4, 9.80665];
    readonly 'tonne-force': readonly [4, 9806.65];
    readonly 'metric ton-force': readonly [4, 9806.65];
    readonly 'megagram-force': readonly [4, 9806.65];
    readonly megapond: readonly [4, 9806.65];
    readonly tf: readonly [4, 9806.65];
    readonly Mp: readonly [4, 9806.65];
    readonly meter: readonly [5, 1];
    readonly meters: readonly [5, 1];
    readonly metre: readonly [5, 1];
    readonly metres: readonly [5, 1];
    readonly m: readonly [5, 1];
    readonly petameter: readonly [5, 1000000000000000];
    readonly petametre: readonly [5, 1000000000000000];
    readonly petameters: readonly [5, 1000000000000000];
    readonly petametres: readonly [5, 1000000000000000];
    readonly Pm: readonly [5, 1000000000000000];
    readonly terameter: readonly [5, 1000000000000];
    readonly terametre: readonly [5, 1000000000000];
    readonly terameters: readonly [5, 1000000000000];
    readonly terametres: readonly [5, 1000000000000];
    readonly Tm: readonly [5, 1000000000000];
    readonly gigameter: readonly [5, 1000000000];
    readonly gigametre: readonly [5, 1000000000];
    readonly gigameters: readonly [5, 1000000000];
    readonly gigametres: readonly [5, 1000000000];
    readonly Gm: readonly [5, 1000000000];
    readonly megameter: readonly [5, 1000000];
    readonly megametre: readonly [5, 1000000];
    readonly megameters: readonly [5, 1000000];
    readonly megametres: readonly [5, 1000000];
    readonly Mm: readonly [5, 1000000];
    readonly kilometer: readonly [5, 1000];
    readonly kilometre: readonly [5, 1000];
    readonly kilometers: readonly [5, 1000];
    readonly kilometres: readonly [5, 1000];
    readonly km: readonly [5, 1000];
    readonly hectometer: readonly [5, 100];
    readonly hectometre: readonly [5, 100];
    readonly hectometers: readonly [5, 100];
    readonly hectometres: readonly [5, 100];
    readonly hm: readonly [5, 100];
    readonly decameter: readonly [5, 10];
    readonly decametre: readonly [5, 10];
    readonly decameters: readonly [5, 10];
    readonly decametres: readonly [5, 10];
    readonly dam: readonly [5, 10];
    readonly decimeter: readonly [5, 0.1];
    readonly decimetre: readonly [5, 0.1];
    readonly decimeters: readonly [5, 0.1];
    readonly decimetres: readonly [5, 0.1];
    readonly dm: readonly [5, 0.1];
    readonly centimeter: readonly [5, 0.01];
    readonly centimetre: readonly [5, 0.01];
    readonly centimeters: readonly [5, 0.01];
    readonly centimetres: readonly [5, 0.01];
    readonly cm: readonly [5, 0.01];
    readonly millimeter: readonly [5, 0.001];
    readonly millimetre: readonly [5, 0.001];
    readonly millimeters: readonly [5, 0.001];
    readonly millimetres: readonly [5, 0.001];
    readonly mm: readonly [5, 0.001];
    readonly micrometer: readonly [5, 0.000001];
    readonly micrometre: readonly [5, 0.000001];
    readonly micrometers: readonly [5, 0.000001];
    readonly micrometres: readonly [5, 0.000001];
    readonly μm: readonly [5, 0.000001];
    readonly µm: readonly [5, 0.000001];
    readonly nanometer: readonly [5, 1e-9];
    readonly nanometre: readonly [5, 1e-9];
    readonly nanometers: readonly [5, 1e-9];
    readonly nanometres: readonly [5, 1e-9];
    readonly nm: readonly [5, 1e-9];
    readonly picometer: readonly [5, 1e-12];
    readonly picometre: readonly [5, 1e-12];
    readonly picometers: readonly [5, 1e-12];
    readonly picometres: readonly [5, 1e-12];
    readonly pm: readonly [5, 1e-12];
    readonly femtometer: readonly [5, 1e-15];
    readonly femtometre: readonly [5, 1e-15];
    readonly femtometers: readonly [5, 1e-15];
    readonly femtometres: readonly [5, 1e-15];
    readonly fm: readonly [5, 1e-15];
    readonly foot: readonly [5, 0.3048];
    readonly feet: readonly [5, 0.3048];
    readonly ft: readonly [5, 0.3048];
    readonly "'": readonly [5, 0.3048];
    readonly inch: readonly [5, 0.0254];
    readonly inches: readonly [5, 0.0254];
    readonly in: readonly [5, 0.0254];
    readonly '"': readonly [5, 0.0254];
    readonly yard: readonly [5, 0.9144];
    readonly yards: readonly [5, 0.9144];
    readonly yd: readonly [5, 0.9144];
    readonly mile: readonly [5, 1609.344];
    readonly miles: readonly [5, 1609.344];
    readonly mi: readonly [5, 1609.344];
    readonly 'nautical mile': readonly [5, 1852];
    readonly 'nautical miles': readonly [5, 1852];
    readonly M: readonly [5, 1852];
    readonly NM: readonly [5, 1852];
    readonly nmi: readonly [5, 1852];
    readonly 'light-year': readonly [5, 9460730472580800];
    readonly 'light-years': readonly [5, 9460730472580800];
    readonly ly: readonly [5, 9460730472580800];
    readonly pica: readonly [5, 0.0042333];
    readonly picas: readonly [5, 0.0042333];
    readonly pc: readonly [5, 0.0042333];
    readonly point: readonly [5, 0.0003528];
    readonly points: readonly [5, 0.0003528];
    readonly gram: readonly [6, 1];
    readonly grams: readonly [6, 1];
    readonly g: readonly [6, 1];
    readonly petagram: readonly [6, 1000000000000000];
    readonly petagrams: readonly [6, 1000000000000000];
    readonly Pg: readonly [6, 1000000000000000];
    readonly teragram: readonly [6, 1000000000000];
    readonly teragrams: readonly [6, 1000000000000];
    readonly Tg: readonly [6, 1000000000000];
    readonly gigagram: readonly [6, 1000000000];
    readonly gigagrams: readonly [6, 1000000000];
    readonly Gg: readonly [6, 1000000000];
    readonly megagram: readonly [6, 1000000];
    readonly megagrams: readonly [6, 1000000];
    readonly Mg: readonly [6, 1000000];
    readonly kilogram: readonly [6, 1000];
    readonly kilograms: readonly [6, 1000];
    readonly kg: readonly [6, 1000];
    readonly hectogram: readonly [6, 100];
    readonly hectograms: readonly [6, 100];
    readonly hg: readonly [6, 100];
    readonly decagram: readonly [6, 10];
    readonly decagrams: readonly [6, 10];
    readonly dag: readonly [6, 10];
    readonly decigram: readonly [6, 0.1];
    readonly decigrams: readonly [6, 0.1];
    readonly dg: readonly [6, 0.1];
    readonly centigram: readonly [6, 0.01];
    readonly centigrams: readonly [6, 0.01];
    readonly cg: readonly [6, 0.01];
    readonly milligram: readonly [6, 0.001];
    readonly milligrams: readonly [6, 0.001];
    readonly mg: readonly [6, 0.001];
    readonly microgram: readonly [6, 0.000001];
    readonly micrograms: readonly [6, 0.000001];
    readonly μg: readonly [6, 0.000001];
    readonly µg: readonly [6, 0.000001];
    readonly nanogram: readonly [6, 1e-9];
    readonly nanograms: readonly [6, 1e-9];
    readonly ng: readonly [6, 1e-9];
    readonly picogram: readonly [6, 1e-12];
    readonly picograms: readonly [6, 1e-12];
    readonly pg: readonly [6, 1e-12];
    readonly femtogram: readonly [6, 1e-15];
    readonly femtograms: readonly [6, 1e-15];
    readonly fg: readonly [6, 1e-15];
    readonly tonne: readonly [6, 1000000];
    readonly tonnes: readonly [6, 1000000];
    readonly 'metric ton': readonly [6, 1000000];
    readonly 'metric tons': readonly [6, 1000000];
    readonly t: readonly [6, 1000000];
    readonly kilotonne: readonly [6, 1000000000];
    readonly kilotonnes: readonly [6, 1000000000];
    readonly kt: readonly [6, 1000000000];
    readonly megatonne: readonly [6, 1000000000000];
    readonly megatonnes: readonly [6, 1000000000000];
    readonly Mt: readonly [6, 1000000000000];
    readonly gigatonne: readonly [6, 1000000000000000];
    readonly gigatonnes: readonly [6, 1000000000000000];
    readonly Gt: readonly [6, 1000000000000000];
    readonly pound: readonly [6, 453.59237];
    readonly pounds: readonly [6, 453.59237];
    readonly lb: readonly [6, 453.59237];
    readonly stone: readonly [6, 6350.29318];
    readonly stones: readonly [6, 6350.29318];
    readonly st: readonly [6, 6350.29318];
    readonly ounce: readonly [6, 28.349523125];
    readonly ounces: readonly [6, 28.349523125];
    readonly oz: readonly [6, 28.349523125];
    readonly '\u2125': readonly [6, 28.349523125];
    readonly 'short ton': readonly [6, 907184.74];
    readonly 'short tons': readonly [6, 907184.74];
    readonly 'US ton': readonly [6, 907184.74];
    readonly 'US tons': readonly [6, 907184.74];
    readonly 'long ton': readonly [6, 1016046.9088];
    readonly 'long tons': readonly [6, 1016046.9088];
    readonly 'imperial ton': readonly [6, 1016046.9088];
    readonly 'imperial tons': readonly [6, 1016046.9088];
    readonly 'displacement ton': readonly [6, 1016046.9088];
    readonly 'displacement tons': readonly [6, 1016046.9088];
    readonly watt: readonly [7, 1];
    readonly watts: readonly [7, 1];
    readonly W: readonly [7, 1];
    readonly petawatt: readonly [7, 1000000000000000];
    readonly petawatts: readonly [7, 1000000000000000];
    readonly PW: readonly [7, 1000000000000000];
    readonly terawatt: readonly [7, 1000000000000];
    readonly terawatts: readonly [7, 1000000000000];
    readonly TW: readonly [7, 1000000000000];
    readonly gigawatt: readonly [7, 1000000000];
    readonly gigawatts: readonly [7, 1000000000];
    readonly GW: readonly [7, 1000000000];
    readonly megawatt: readonly [7, 1000000];
    readonly megawatts: readonly [7, 1000000];
    readonly MW: readonly [7, 1000000];
    readonly kilowatt: readonly [7, 1000];
    readonly kilowatts: readonly [7, 1000];
    readonly kW: readonly [7, 1000];
    readonly hectowatt: readonly [7, 100];
    readonly hectowatts: readonly [7, 100];
    readonly hW: readonly [7, 100];
    readonly decawatt: readonly [7, 10];
    readonly decawatts: readonly [7, 10];
    readonly daW: readonly [7, 10];
    readonly deciwatt: readonly [7, 0.1];
    readonly deciwatts: readonly [7, 0.1];
    readonly dW: readonly [7, 0.1];
    readonly centiwatt: readonly [7, 0.01];
    readonly centiwatts: readonly [7, 0.01];
    readonly cW: readonly [7, 0.01];
    readonly milliwatt: readonly [7, 0.001];
    readonly milliwatts: readonly [7, 0.001];
    readonly mW: readonly [7, 0.001];
    readonly microwatt: readonly [7, 0.000001];
    readonly microwatts: readonly [7, 0.000001];
    readonly μW: readonly [7, 0.000001];
    readonly µW: readonly [7, 0.000001];
    readonly nanowatt: readonly [7, 1e-9];
    readonly nanowatts: readonly [7, 1e-9];
    readonly nW: readonly [7, 1e-9];
    readonly picowatt: readonly [7, 1e-12];
    readonly picowatts: readonly [7, 1e-12];
    readonly pW: readonly [7, 1e-12];
    readonly femtowatt: readonly [7, 1e-15];
    readonly femtowatts: readonly [7, 1e-15];
    readonly fW: readonly [7, 1e-15];
    readonly horsepower: readonly [7, 745.699872];
    readonly 'mechanical horsepower': readonly [7, 745.699872];
    readonly hp: readonly [7, 745.699872];
    readonly pascal: readonly [8, 1];
    readonly pascals: readonly [8, 1];
    readonly Pa: readonly [8, 1];
    readonly petapascal: readonly [8, 1000000000000000];
    readonly petapascals: readonly [8, 1000000000000000];
    readonly PPa: readonly [8, 1000000000000000];
    readonly terapascal: readonly [8, 1000000000000];
    readonly terapascals: readonly [8, 1000000000000];
    readonly TPa: readonly [8, 1000000000000];
    readonly gigapascal: readonly [8, 1000000000];
    readonly gigapascals: readonly [8, 1000000000];
    readonly GPa: readonly [8, 1000000000];
    readonly megapascal: readonly [8, 1000000];
    readonly megapascals: readonly [8, 1000000];
    readonly MPa: readonly [8, 1000000];
    readonly kilopascal: readonly [8, 1000];
    readonly kilopascals: readonly [8, 1000];
    readonly kPa: readonly [8, 1000];
    readonly hectopascal: readonly [8, 100];
    readonly hectopascals: readonly [8, 100];
    readonly hPa: readonly [8, 100];
    readonly decapascal: readonly [8, 10];
    readonly decapascals: readonly [8, 10];
    readonly daPa: readonly [8, 10];
    readonly decipascal: readonly [8, 0.1];
    readonly decipascals: readonly [8, 0.1];
    readonly dPa: readonly [8, 0.1];
    readonly centipascal: readonly [8, 0.01];
    readonly centipascals: readonly [8, 0.01];
    readonly cPa: readonly [8, 0.01];
    readonly millipascal: readonly [8, 0.001];
    readonly millipascals: readonly [8, 0.001];
    readonly mPa: readonly [8, 0.001];
    readonly micropascal: readonly [8, 0.000001];
    readonly micropascals: readonly [8, 0.000001];
    readonly μPa: readonly [8, 0.000001];
    readonly µPa: readonly [8, 0.000001];
    readonly nanopascal: readonly [8, 1e-9];
    readonly nanopascals: readonly [8, 1e-9];
    readonly nPa: readonly [8, 1e-9];
    readonly picopascal: readonly [8, 1e-12];
    readonly picopascals: readonly [8, 1e-12];
    readonly pPa: readonly [8, 1e-12];
    readonly femtopascal: readonly [8, 1e-15];
    readonly femtopascals: readonly [8, 1e-15];
    readonly fPa: readonly [8, 1e-15];
    readonly bar: readonly [8, 100000];
    readonly bars: readonly [8, 100000];
    readonly petabar: readonly [8, 100000000000000000000];
    readonly petabars: readonly [8, 100000000000000000000];
    readonly Pbar: readonly [8, 100000000000000000000];
    readonly terabar: readonly [8, 100000000000000000];
    readonly terabars: readonly [8, 100000000000000000];
    readonly Tbar: readonly [8, 100000000000000000];
    readonly gigabar: readonly [8, 100000000000000];
    readonly gigabars: readonly [8, 100000000000000];
    readonly Gbar: readonly [8, 100000000000000];
    readonly megabar: readonly [8, 100000000000];
    readonly megabars: readonly [8, 100000000000];
    readonly Mbar: readonly [8, 100000000000];
    readonly kilobar: readonly [8, 100000000];
    readonly kilobars: readonly [8, 100000000];
    readonly kbar: readonly [8, 100000000];
    readonly hectobar: readonly [8, 10000000];
    readonly hectobars: readonly [8, 10000000];
    readonly hbar: readonly [8, 10000000];
    readonly decabar: readonly [8, 1000000];
    readonly decabars: readonly [8, 1000000];
    readonly dabar: readonly [8, 1000000];
    readonly decibar: readonly [8, 10000];
    readonly decibars: readonly [8, 10000];
    readonly dbar: readonly [8, 10000];
    readonly centibar: readonly [8, 1000];
    readonly centibars: readonly [8, 1000];
    readonly cbar: readonly [8, 1000];
    readonly millibar: readonly [8, 100];
    readonly millibars: readonly [8, 100];
    readonly mbar: readonly [8, 100];
    readonly microbar: readonly [8, 0.1];
    readonly microbars: readonly [8, 0.1];
    readonly μbar: readonly [8, 0.1];
    readonly µbar: readonly [8, 0.1];
    readonly nanobar: readonly [8, 0.0001];
    readonly nanobars: readonly [8, 0.0001];
    readonly nbar: readonly [8, 0.0001];
    readonly picobar: readonly [8, 1e-7];
    readonly picobars: readonly [8, 1e-7];
    readonly pbar: readonly [8, 1e-7];
    readonly femtobar: readonly [8, 1e-10];
    readonly femtobars: readonly [8, 1e-10];
    readonly fbar: readonly [8, 1e-10];
    readonly torr: readonly [8, 133.32236842105263];
    readonly torrs: readonly [8, 133.32236842105263];
    readonly Torr: readonly [8, 133.32236842105263];
    readonly millitorr: readonly [8, 0.13332236842105263];
    readonly mTorr: readonly [8, 0.13332236842105263];
    readonly atmosphere: readonly [8, 101325];
    readonly atmospheres: readonly [8, 101325];
    readonly atm: readonly [8, 101325];
    readonly 'pound per square inch': readonly [8, 6894.757];
    readonly 'pounds per square inch': readonly [8, 6894.757];
    readonly psi: readonly [8, 6894.757];
    readonly 'lbf/in2': readonly [8, 6894.757];
    readonly 'lbf/in\u00B2': readonly [8, 6894.757];
    readonly kelvin: readonly [9, 1];
    readonly kelvins: readonly [9, 1];
    readonly K: readonly [9, 1];
    readonly petakelvin: readonly [9, 1000000000000000];
    readonly petakelvins: readonly [9, 1000000000000000];
    readonly PK: readonly [9, 1000000000000000];
    readonly terakelvin: readonly [9, 1000000000000];
    readonly terakelvins: readonly [9, 1000000000000];
    readonly TK: readonly [9, 1000000000000];
    readonly gigakelvin: readonly [9, 1000000000];
    readonly gigakelvins: readonly [9, 1000000000];
    readonly GK: readonly [9, 1000000000];
    readonly megakelvin: readonly [9, 1000000];
    readonly megakelvins: readonly [9, 1000000];
    readonly MK: readonly [9, 1000000];
    readonly kilokelvin: readonly [9, 1000];
    readonly kilokelvins: readonly [9, 1000];
    readonly kK: readonly [9, 1000];
    readonly hectokelvin: readonly [9, 100];
    readonly hectokelvins: readonly [9, 100];
    readonly hK: readonly [9, 100];
    readonly decakelvin: readonly [9, 10];
    readonly decakelvins: readonly [9, 10];
    readonly daK: readonly [9, 10];
    readonly decikelvin: readonly [9, 0.1];
    readonly decikelvins: readonly [9, 0.1];
    readonly dK: readonly [9, 0.1];
    readonly centikelvin: readonly [9, 0.01];
    readonly centikelvins: readonly [9, 0.01];
    readonly cK: readonly [9, 0.01];
    readonly millikelvin: readonly [9, 0.001];
    readonly millikelvins: readonly [9, 0.001];
    readonly mK: readonly [9, 0.001];
    readonly microkelvin: readonly [9, 0.000001];
    readonly microkelvins: readonly [9, 0.000001];
    readonly μK: readonly [9, 0.000001];
    readonly µK: readonly [9, 0.000001];
    readonly nanokelvin: readonly [9, 1e-9];
    readonly nanokelvins: readonly [9, 1e-9];
    readonly nK: readonly [9, 1e-9];
    readonly picokelvin: readonly [9, 1e-12];
    readonly picokelvins: readonly [9, 1e-12];
    readonly pK: readonly [9, 1e-12];
    readonly femtokelvin: readonly [9, 1e-15];
    readonly femtokelvins: readonly [9, 1e-15];
    readonly fK: readonly [9, 1e-15];
    readonly fahrenheit: readonly [9, 0.5555555555555556];
    readonly F: readonly [9, 0.5555555555555556];
    readonly celsius: readonly [9, 1];
    readonly C: readonly [9, 1];
    readonly rankine: readonly [9, 0.5555555555555556];
    readonly R: readonly [9, 0.5555555555555556];
    readonly second: readonly [10, 1];
    readonly seconds: readonly [10, 1];
    readonly s: readonly [10, 1];
    readonly petasecond: readonly [10, 1000000000000000];
    readonly petaseconds: readonly [10, 1000000000000000];
    readonly Ps: readonly [10, 1000000000000000];
    readonly terasecond: readonly [10, 1000000000000];
    readonly teraseconds: readonly [10, 1000000000000];
    readonly Ts: readonly [10, 1000000000000];
    readonly gigasecond: readonly [10, 1000000000];
    readonly gigaseconds: readonly [10, 1000000000];
    readonly Gs: readonly [10, 1000000000];
    readonly megasecond: readonly [10, 1000000];
    readonly megaseconds: readonly [10, 1000000];
    readonly Ms: readonly [10, 1000000];
    readonly kilosecond: readonly [10, 1000];
    readonly kiloseconds: readonly [10, 1000];
    readonly ks: readonly [10, 1000];
    readonly hectosecond: readonly [10, 100];
    readonly hectoseconds: readonly [10, 100];
    readonly hs: readonly [10, 100];
    readonly decasecond: readonly [10, 10];
    readonly decaseconds: readonly [10, 10];
    readonly das: readonly [10, 10];
    readonly decisecond: readonly [10, 0.1];
    readonly deciseconds: readonly [10, 0.1];
    readonly ds: readonly [10, 0.1];
    readonly centisecond: readonly [10, 0.01];
    readonly centiseconds: readonly [10, 0.01];
    readonly cs: readonly [10, 0.01];
    readonly millisecond: readonly [10, 0.001];
    readonly milliseconds: readonly [10, 0.001];
    readonly ms: readonly [10, 0.001];
    readonly microsecond: readonly [10, 0.000001];
    readonly microseconds: readonly [10, 0.000001];
    readonly μs: readonly [10, 0.000001];
    readonly µs: readonly [10, 0.000001];
    readonly nanosecond: readonly [10, 1e-9];
    readonly nanoseconds: readonly [10, 1e-9];
    readonly ns: readonly [10, 1e-9];
    readonly picosecond: readonly [10, 1e-12];
    readonly picoseconds: readonly [10, 1e-12];
    readonly ps: readonly [10, 1e-12];
    readonly femtosecond: readonly [10, 1e-15];
    readonly femtoseconds: readonly [10, 1e-15];
    readonly fs: readonly [10, 1e-15];
    readonly minute: readonly [10, 60];
    readonly minutes: readonly [10, 60];
    readonly min: readonly [10, 60];
    readonly hour: readonly [10, 3600];
    readonly hours: readonly [10, 3600];
    readonly h: readonly [10, 3600];
    readonly milliday: readonly [10, 86.4];
    readonly millidays: readonly [10, 86.4];
    readonly md: readonly [10, 86.4];
    readonly day: readonly [10, 86400];
    readonly days: readonly [10, 86400];
    readonly d: readonly [10, 86400];
    readonly week: readonly [10, 604800];
    readonly weeks: readonly [10, 604800];
    readonly wk: readonly [10, 604800];
    readonly fortnight: readonly [10, 1209600];
    readonly fortnights: readonly [10, 1209600];
    readonly fn: readonly [10, 1209600];
    readonly month: readonly [10, 2592000];
    readonly months: readonly [10, 2592000];
    readonly mo: readonly [10, 2592000];
    readonly year: readonly [10, 31536000];
    readonly years: readonly [10, 31536000];
    readonly a: readonly [10, 31536000];
    readonly y: readonly [10, 31536000];
    readonly yr: readonly [10, 31536000];
    readonly decade: readonly [10, 315569520];
    readonly decades: readonly [10, 315569520];
    readonly dec: readonly [10, 315569520];
    readonly century: readonly [10, 3155695200];
    readonly centuries: readonly [10, 3155695200];
    readonly millennium: readonly [10, 31556952000];
    readonly millennia: readonly [10, 31556952000];
    readonly moment: readonly [10, 90];
    readonly moments: readonly [10, 90];
    readonly shake: readonly [10, 1e-8];
    readonly shakes: readonly [10, 1e-8];
    readonly 'time unit': readonly [10, 0.001024];
    readonly TU: readonly [10, 0.001024];
    readonly svedberg: readonly [10, 1e-13];
    readonly svedbergs: readonly [10, 1e-13];
    readonly S: readonly [10, 1e-13];
    readonly 'cubic meter': readonly [11, 1];
    readonly 'cubic meters': readonly [11, 1];
    readonly 'cubic metre': readonly [11, 1];
    readonly 'cubic metres': readonly [11, 1];
    readonly stere: readonly [11, 1];
    readonly steres: readonly [11, 1];
    readonly 'm\u00B3': readonly [11, 1];
    readonly m3: readonly [11, 1];
    readonly 'cubic petameter': readonly [11, 1e+45];
    readonly 'cubic petameters': readonly [11, 1e+45];
    readonly Pm3: readonly [11, 1e+45];
    readonly 'Pm\u00B3': readonly [11, 1e+45];
    readonly 'cubic terameter': readonly [11, 1e+36];
    readonly 'cubic terameters': readonly [11, 1e+36];
    readonly Tm3: readonly [11, 1e+36];
    readonly 'Tm\u00B3': readonly [11, 1e+36];
    readonly 'cubic gigameter': readonly [11, 1e+27];
    readonly 'cubic gigameters': readonly [11, 1e+27];
    readonly Gm3: readonly [11, 1e+27];
    readonly 'Gm\u00B3': readonly [11, 1e+27];
    readonly 'cubic megameter': readonly [11, 1000000000000000000];
    readonly 'cubic megameters': readonly [11, 1000000000000000000];
    readonly Mm3: readonly [11, 1000000000000000000];
    readonly 'Mm\u00B3': readonly [11, 1000000000000000000];
    readonly 'cubic kilometer': readonly [11, 1000000000];
    readonly 'cubic kilometers': readonly [11, 1000000000];
    readonly km3: readonly [11, 1000000000];
    readonly 'km\u00B3': readonly [11, 1000000000];
    readonly 'cubic hectometer': readonly [11, 1000000];
    readonly 'cubic hectometers': readonly [11, 1000000];
    readonly hm3: readonly [11, 1000000];
    readonly 'hm\u00B3': readonly [11, 1000000];
    readonly 'cubic decameter': readonly [11, 1000];
    readonly 'cubic decameters': readonly [11, 1000];
    readonly dam3: readonly [11, 1000];
    readonly 'dam\u00B3': readonly [11, 1000];
    readonly 'cubic decimeter': readonly [11, 0.001];
    readonly 'cubic decimeters': readonly [11, 0.001];
    readonly dm3: readonly [11, 0.001];
    readonly 'dm\u00B3': readonly [11, 0.001];
    readonly 'cubic centimeter': readonly [11, 0.000001];
    readonly 'cubic centimeters': readonly [11, 0.000001];
    readonly cm3: readonly [11, 0.000001];
    readonly 'cm\u00B3': readonly [11, 0.000001];
    readonly 'cubic millimeter': readonly [11, 1e-9];
    readonly 'cubic millimeters': readonly [11, 1e-9];
    readonly mm3: readonly [11, 1e-9];
    readonly 'mm\u00B3': readonly [11, 1e-9];
    readonly 'cubic micrometer': readonly [11, 1e-18];
    readonly 'cubic micrometers': readonly [11, 1e-18];
    readonly μm3: readonly [11, 1e-18];
    readonly µm3: readonly [11, 1e-18];
    readonly '\u03BCm\u00B3': readonly [11, 1e-18];
    readonly '\u00B5m\u00B3': readonly [11, 1e-18];
    readonly 'cubic nanometer': readonly [11, 1e-27];
    readonly 'cubic nanometers': readonly [11, 1e-27];
    readonly nm3: readonly [11, 1e-27];
    readonly 'nm\u00B3': readonly [11, 1e-27];
    readonly 'cubic picometer': readonly [11, 1e-36];
    readonly 'cubic picometers': readonly [11, 1e-36];
    readonly pm3: readonly [11, 1e-36];
    readonly 'pm\u00B3': readonly [11, 1e-36];
    readonly 'cubic femtometer': readonly [11, 1e-45];
    readonly 'cubic femtometers': readonly [11, 1e-45];
    readonly fm3: readonly [11, 1e-45];
    readonly 'fm\u00B3': readonly [11, 1e-45];
    readonly liter: readonly [11, 0.001];
    readonly liters: readonly [11, 0.001];
    readonly litre: readonly [11, 0.001];
    readonly litres: readonly [11, 0.001];
    readonly l: readonly [11, 0.001];
    readonly L: readonly [11, 0.001];
    readonly petaliter: readonly [11, 1000000000000];
    readonly petaliters: readonly [11, 1000000000000];
    readonly petalitre: readonly [11, 1000000000000];
    readonly petalitres: readonly [11, 1000000000000];
    readonly Pl: readonly [11, 1000000000000];
    readonly PL: readonly [11, 1000000000000];
    readonly teraliter: readonly [11, 1000000000];
    readonly teraliters: readonly [11, 1000000000];
    readonly teralitre: readonly [11, 1000000000];
    readonly teralitres: readonly [11, 1000000000];
    readonly Tl: readonly [11, 1000000000];
    readonly TL: readonly [11, 1000000000];
    readonly gigaliter: readonly [11, 1000000];
    readonly gigaliters: readonly [11, 1000000];
    readonly gigalitre: readonly [11, 1000000];
    readonly gigalitres: readonly [11, 1000000];
    readonly Gl: readonly [11, 1000000];
    readonly GL: readonly [11, 1000000];
    readonly megaliter: readonly [11, 1000];
    readonly megaliters: readonly [11, 1000];
    readonly megalitre: readonly [11, 1000];
    readonly megalitres: readonly [11, 1000];
    readonly Ml: readonly [11, 1000];
    readonly ML: readonly [11, 1000];
    readonly kiloliter: readonly [11, 1];
    readonly kiloliters: readonly [11, 1];
    readonly kilolitre: readonly [11, 1];
    readonly kilolitres: readonly [11, 1];
    readonly kl: readonly [11, 1];
    readonly kL: readonly [11, 1];
    readonly hectoliter: readonly [11, 0.1];
    readonly hectoliters: readonly [11, 0.1];
    readonly hectolitre: readonly [11, 0.1];
    readonly hectolitres: readonly [11, 0.1];
    readonly hl: readonly [11, 0.1];
    readonly hL: readonly [11, 0.1];
    readonly decaliter: readonly [11, 0.01];
    readonly decaliters: readonly [11, 0.01];
    readonly decalitre: readonly [11, 0.01];
    readonly decalitres: readonly [11, 0.01];
    readonly dal: readonly [11, 0.01];
    readonly daL: readonly [11, 0.01];
    readonly deciliter: readonly [11, 0.0001];
    readonly deciliters: readonly [11, 0.0001];
    readonly decilitre: readonly [11, 0.0001];
    readonly decilitres: readonly [11, 0.0001];
    readonly dl: readonly [11, 0.0001];
    readonly dL: readonly [11, 0.0001];
    readonly centiliter: readonly [11, 0.00001];
    readonly centiliters: readonly [11, 0.00001];
    readonly centilitre: readonly [11, 0.00001];
    readonly centilitres: readonly [11, 0.00001];
    readonly cl: readonly [11, 0.00001];
    readonly cL: readonly [11, 0.00001];
    readonly milliliter: readonly [11, 0.000001];
    readonly milliliters: readonly [11, 0.000001];
    readonly millilitre: readonly [11, 0.000001];
    readonly millilitres: readonly [11, 0.000001];
    readonly ml: readonly [11, 0.000001];
    readonly mL: readonly [11, 0.000001];
    readonly microliter: readonly [11, 1e-9];
    readonly microliters: readonly [11, 1e-9];
    readonly microlitre: readonly [11, 1e-9];
    readonly microlitres: readonly [11, 1e-9];
    readonly μl: readonly [11, 1e-9];
    readonly µl: readonly [11, 1e-9];
    readonly μL: readonly [11, 1e-9];
    readonly µL: readonly [11, 1e-9];
    readonly nanoliter: readonly [11, 1e-12];
    readonly nanoliters: readonly [11, 1e-12];
    readonly nanolitre: readonly [11, 1e-12];
    readonly nanolitres: readonly [11, 1e-12];
    readonly nl: readonly [11, 1e-12];
    readonly nL: readonly [11, 1e-12];
    readonly picoliter: readonly [11, 1e-15];
    readonly picoliters: readonly [11, 1e-15];
    readonly picolitre: readonly [11, 1e-15];
    readonly picolitres: readonly [11, 1e-15];
    readonly pl: readonly [11, 1e-15];
    readonly pL: readonly [11, 1e-15];
    readonly femtoliter: readonly [11, 1e-18];
    readonly femtoliters: readonly [11, 1e-18];
    readonly femtolitre: readonly [11, 1e-18];
    readonly femtolitres: readonly [11, 1e-18];
    readonly fl: readonly [11, 1e-18];
    readonly fL: readonly [11, 1e-18];
    readonly 'cubic mile': readonly [11, 4200];
    readonly 'cubic miles': readonly [11, 4200];
    readonly 'cu mi': readonly [11, 4200];
    readonly mi3: readonly [11, 4200];
    readonly 'mi\u00B3': readonly [11, 4200];
    readonly 'acre-foot': readonly [11, 1233.48183754752];
    readonly 'acre-feet': readonly [11, 1233.48183754752];
    readonly 'ac\u22C5ft': readonly [11, 1233.48183754752];
    readonly 'ac ft': readonly [11, 1233.48183754752];
    readonly 'cubic yard': readonly [11, 0.76];
    readonly 'cubic yards': readonly [11, 0.76];
    readonly 'cu yd': readonly [11, 0.76];
    readonly yd3: readonly [11, 0.76];
    readonly 'yd\u00B3': readonly [11, 0.76];
    readonly 'cubic foot': readonly [11, 0.028316846592];
    readonly 'cubic feet': readonly [11, 0.028316846592];
    readonly 'cu ft': readonly [11, 0.028316846592];
    readonly ft3: readonly [11, 0.028316846592];
    readonly 'ft\u00B3': readonly [11, 0.028316846592];
    readonly 'board foot': readonly [11, 0.002359737];
    readonly 'board feet': readonly [11, 0.002359737];
    readonly 'cubic inch': readonly [11, 0.000016387064];
    readonly 'cubic inches': readonly [11, 0.000016387064];
    readonly 'cu in': readonly [11, 0.000016387064];
    readonly in3: readonly [11, 0.000016387064];
    readonly 'in\u00B3': readonly [11, 0.000016387064];
    readonly 'measurement ton': readonly [11, 1.133];
    readonly 'measurement tons': readonly [11, 1.133];
    readonly MTON: readonly [11, 1.133];
    readonly 'imperial barrel': readonly [11, 0.16];
    readonly 'imperial barrels': readonly [11, 0.16];
    readonly 'imp bbl': readonly [11, 0.16];
    readonly 'imperial bushel': readonly [11, 0.03636872];
    readonly 'imperial bushels': readonly [11, 0.03636872];
    readonly 'imp bsh': readonly [11, 0.03636872];
    readonly 'imp bu': readonly [11, 0.03636872];
    readonly 'imperial peck': readonly [11, 0.00909218];
    readonly 'imperial pecks': readonly [11, 0.00909218];
    readonly pk: readonly [11, 0.00909218];
    readonly 'imp pk': readonly [11, 0.00909218];
    readonly 'imperial gallon': readonly [11, 0.00454609];
    readonly 'imperial gallons': readonly [11, 0.00454609];
    readonly 'imp gal': readonly [11, 0.00454609];
    readonly 'imperial quart': readonly [11, 0.0011365225];
    readonly 'imperial quarts': readonly [11, 0.0011365225];
    readonly 'imp qt': readonly [11, 0.0011365225];
    readonly 'imperial pint': readonly [11, 0.00056826125];
    readonly 'imperial pints': readonly [11, 0.00056826125];
    readonly 'imp pt': readonly [11, 0.00056826125];
    readonly 'imperial fluid ounce': readonly [11, 0.0000284130625];
    readonly 'imperial fluid ounces': readonly [11, 0.0000284130625];
    readonly 'imp fl oz': readonly [11, 0.0000284130625];
    readonly teaspoon: readonly [11, 0.00000492892159375];
    readonly teaspoons: readonly [11, 0.00000492892159375];
    readonly 'US teaspoon': readonly [11, 0.00000492892159375];
    readonly 'US teaspoons': readonly [11, 0.00000492892159375];
    readonly tsp: readonly [11, 0.00000492892159375];
    readonly tablespoon: readonly [11, 0.00001478676478125];
    readonly tablespoons: readonly [11, 0.00001478676478125];
    readonly 'US tablespoon': readonly [11, 0.00001478676478125];
    readonly 'US tablespoons': readonly [11, 0.00001478676478125];
    readonly tbsp: readonly [11, 0.00001478676478125];
    readonly 'US fluid ounce': readonly [11, 0.0000295735295625];
    readonly 'US fluid ounces': readonly [11, 0.0000295735295625];
    readonly 'fl oz': readonly [11, 0.0000295735295625];
    readonly 'fl. oz.': readonly [11, 0.0000295735295625];
    readonly 'oz. fl.': readonly [11, 0.0000295735295625];
    readonly cup: readonly [11, 0.0002365882365];
    readonly cups: readonly [11, 0.0002365882365];
    readonly c: readonly [11, 0.0002365882365];
    readonly 'US legal cup': readonly [11, 0.00024];
    readonly 'US legal cups': readonly [11, 0.00024];
    readonly 'US lc': readonly [11, 0.00024];
    readonly pint: readonly [11, 0.000473176473];
    readonly pints: readonly [11, 0.000473176473];
    readonly 'US liquid pint': readonly [11, 0.000473176473];
    readonly 'US liquid pints': readonly [11, 0.000473176473];
    readonly pt: readonly [11, 0.000473176473];
    readonly p: readonly [11, 0.000473176473];
    readonly quart: readonly [11, 0.000946352946];
    readonly quarts: readonly [11, 0.000946352946];
    readonly 'US liquid quart': readonly [11, 0.000946352946];
    readonly 'US liquid quarts': readonly [11, 0.000946352946];
    readonly qt: readonly [11, 0.000946352946];
    readonly gallon: readonly [11, 0.003785411784];
    readonly gallons: readonly [11, 0.003785411784];
    readonly 'US liquid gallon': readonly [11, 0.003785411784];
    readonly 'US liquid gallons': readonly [11, 0.003785411784];
    readonly gal: readonly [11, 0.003785411784];
    readonly 'US bushel': readonly [11, 0.03523907016688];
    readonly 'US bushels': readonly [11, 0.03523907016688];
    readonly 'US bsh': readonly [11, 0.03523907016688];
    readonly 'US bu': readonly [11, 0.03523907016688];
    readonly 'US peck': readonly [11, 0.00880976754172];
    readonly 'US pk': readonly [11, 0.00880976754172];
    readonly 'US dry gallon': readonly [11, 0.00440488377086];
    readonly 'US dry gal': readonly [11, 0.00440488377086];
    readonly 'US dry barrel': readonly [11, 0.1156];
    readonly 'US dry barrels': readonly [11, 0.1156];
    readonly 'US dry bbl': readonly [11, 0.1156];
    readonly 'US dry quart': readonly [11, 0.001101220942715];
    readonly 'US dry qt': readonly [11, 0.001101220942715];
    readonly 'US dry pint': readonly [11, 0.0005506104713575];
    readonly 'US dry pt': readonly [11, 0.0005506104713575];
};

/**
 * Convert a given angle into another unit.
 *
 * @param angle - The angle you want to convert
 * @param from - The angle type you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(angle: Q, from: Angle): Converter<Q, Angle>;

/**
 * Convert a given area into another unit.
 *
 * @param quantity - The area you want to convert
 * @param from - The unit of area you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(quantity: Q, from: Area): Converter<Q, Area>;

/**
 * Convert a given quantity of data into another unit.
 *
 * @param quantity - The quantity of data you want to convert
 * @param from - The unit of data you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(quantity: Q, from: Data): Converter<Q, Data>;

/**
 * Convert a given quantity of energy into another unit.
 *
 * @param quantity - The quantity of energy you want to convert
 * @param from - The unit of energy you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(quantity: Q, from: Energy): Converter<Q, Energy>;

/**
 * Convert a given quantity of force into another unit.
 *
 * @param quantity - The quantity of force you want to convert
 * @param from - The unit of force you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(quantity: Q, from: Force): Converter<Q, Force>;

/**
 * Convert a given length into another unit.
 *
 * @param length - The length you want to convert
 * @param from - The unit of length you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(length: Q, from: Length): Converter<Q, Length>;

/**
 * Convert a given quantity of mass into another unit.
 *
 * @param quantity - The quantity of mass you want to convert
 * @param from - The unit of mass you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(quantity: Q, from: Mass): Converter<Q, Mass>;

/**
 * Convert a given quantity of power into another unit.
 *
 * @param quantity - The quantity of power you want to convert
 * @param from - The unit of power you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(quantity: Q, from: Power): Converter<Q, Power>;

/**
 * Convert a given quantity of pressure into another unit.
 *
 * @param quantity - The quantity of pressure you want to convert
 * @param from - The unit of pressure you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(quantity: Q, from: Pressure): Converter<Q, Pressure>;

/**
 * Convert a given temperature into another unit.
 *
 * @param quantity - The quantity of temperature you want to convert
 * @param from - The unit of temperature are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(quantity: Q, from: Temperature): Converter<Q, Temperature>;

/**
 * Convert a given duration of time into another unit.
 *
 * @param duration - The duration of time you want to convert
 * @param from - The unit of time you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(duration: Q, from: Time): Converter<Q, Time>;

/**
 * Convert a given quantity of volume into another unit.
 *
 * @param quantity - The quantity of volume you want to convert
 * @param from - The unit of volume you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
declare function convert<Q extends number | bigint>(quantity: Q, from: Volume): Converter<Q, Volume>;
export { convert }
export default convert;

/**
 * The return value from calling a conversion function.
 * @public
 */
export declare type Converter<Q extends number | bigint, U extends Unit> = {
    /**
     * Convert a quantity of one unit into a new unit
     *
     * @param to - The unit you want to convert to
     *
     * @returns The converted value
     */
    to(to: U): SimplifyQuantity<Q>;
    /**
     * Convert a measurement to the best unit for display.
     *
     * @param to - The string `best`
     * @param kind - The set of units to use (defaults to `'metric'`)
     *
     * @returns An object with a `quantity` property of the `unit` unit, which can be casted to a string using the `toString()` method
     */
    to<B extends BestUnits<UnitToFamily[U], K>, K extends Best_2.Kind = Best_2.Kind>(to: 'best', kind?: K | undefined): _BestConversion<Q, B>;
};

/**
 * Convert several values in a string into a single unit.
 *
 * @example
 * ```ts
 * convertMany('1d 12h').to('hours') === 36;
 * ```
 *
 * @param value - The string to parse as values
 *
 * @public
 */
export declare function convertMany(value: string): Converter<number, Unit>;

/**
 * Valid data units.
 * @public
 */
export declare type Data = GetAliases<_ConversionFamilyId.Data>;

/**
 * Valid energy units.
 * @public
 */
export declare type Energy = GetAliases<_ConversionFamilyId.Energy>;

declare type FamilyToUnit = {
    [P in AllValues['family']]: Extract<AllValues, {
        family: P;
    }>['unit'];
};

/**
 * Valid force units.
 * @public
 */
export declare type Force = GetAliases<_ConversionFamilyId.Force>;

/**
 * A string literal type for all units belonging to a given conversion family.
 * @public
 */
export declare type GetAliases<T extends _ConversionFamilyId> = FamilyToUnit[T];

declare namespace Indexes {
    export {
        Best,
        Conversion
    }
}

/** @public */
declare type Kind = 'metric' | 'imperial';

/**
 * Valid length units.
 * @public
 */
export declare type Length = GetAliases<_ConversionFamilyId.Length>;

/**
 * Valid mass units.
 * @public
 */
export declare type Mass = GetAliases<_ConversionFamilyId.Mass>;

/**
 * Convert a given duration of milliseconds to a string that best represents it.
 *
 * If you are very concerned about performance you should use the {@link convertMany} function directly.
 *
 * @example
 * ```ts
 * ms(-3 * 60000); // '-3min'
 * ```
 *
 * @param quantity - Duration of milliseconds to convert
 *
 * @returns A duration string
 *
 * @public
 */
export declare function ms<Q extends number | bigint>(quantity: Q): `${SimplifyQuantity<Q>}${BestUnits<_ConversionFamilyId.Time>}`;

/**
 * Convert a duration string to a duration in milliseconds.
 *
 * If you are very concerned about performance you should use the {@link convertMany} function directly.
 *
 * @example
 * ```ts
 * ms('1d 2h 30min'); // 95400000
 * ```
 *
 * @param value - Duration string to convert
 *
 * @returns A duration in milliseconds
 *
 * @public
 */
export declare function ms(value: string): number;

/**
 * Valid power units.
 * @public
 */
export declare type Power = GetAliases<_ConversionFamilyId.Power>;

/**
 * Valid pressure units.
 * @public
 */
export declare type Pressure = GetAliases<_ConversionFamilyId.Pressure>;

declare type SimplifyQuantity<Q> = Q extends number ? number : Q extends bigint ? bigint : never;

/**
 * Valid temperature units.
 * @public
 */
export declare type Temperature = GetAliases<_ConversionFamilyId.Temperature>;

/**
 * Valid time units.
 * @public
 */
export declare type Time = GetAliases<_ConversionFamilyId.Time>;

/**
 * A supported unit you can convert.
 * @public
 */
export declare type Unit = GetAliases<_ConversionFamilyId>;

declare type Units = Omit<typeof conversions, '__proto__'>;

declare type UnitToFamily = Record<Angle, _ConversionFamilyId.Angle> & Record<Area, _ConversionFamilyId.Area> & Record<Data, _ConversionFamilyId.Data> & Record<Energy, _ConversionFamilyId.Energy> & Record<Force, _ConversionFamilyId.Force> & Record<Length, _ConversionFamilyId.Length> & Record<Mass, _ConversionFamilyId.Mass> & Record<Power, _ConversionFamilyId.Power> & Record<Pressure, _ConversionFamilyId.Pressure> & Record<Temperature, _ConversionFamilyId.Temperature> & Record<Time, _ConversionFamilyId.Time> & Record<Volume, _ConversionFamilyId.Volume>;

/**
 * Valid volume units.
 * @public
 */
export declare type Volume = GetAliases<_ConversionFamilyId.Volume>;

export { }
