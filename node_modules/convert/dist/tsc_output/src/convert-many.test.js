import { prod, dev } from '../test/convert';
import { testWithBuilds } from '../test/with-builds';
const invalidValue = 'not a valid value';
const invalidUnit = 'not a valid unit';
describe('errors', () => {
    describe('production', () => {
        expect(() => prod.convertMany(invalidValue)).toThrowError(new RangeError(''));
        expect(() => prod
            .convertMany('1000ms')
            // @ts-expect-error Invalid unit
            .to(invalidUnit)).toThrow(TypeError);
    });
    describe('development', () => {
        test.each([
            () => dev.convertMany(invalidValue),
            () => dev
                .convertMany('1000ms')
                // @ts-expect-error Invalid unit
                .to(invalidUnit),
        ])('%p', fn => {
            expect(fn).toThrow(RangeError);
            expect(fn).toThrow(/.+/);
        });
    });
});
describe('conversions', () => {
    describe.each([
        { from: '1min 30s', to: [90, 'seconds'] },
        { from: '51h 13min 56s', to: [51 + 13 / 60 + 56 / 60 / 60, 'hours'] },
        { from: '51h 13min 56s', to: [51 + 13 / 60 + 56 / 60 / 60, 'h'] },
        { from: '1m3', to: [1, 'm3'] },
        { from: '.1m', to: [0.1, 'm'] },
        { from: '-.1m', to: [-0.1, 'm'] },
        { from: '-1m', to: [-1, 'm'] },
        { from: '0.1m', to: [0.1, 'm'] },
        { from: '-0.1m', to: [-0.1, 'm'] },
    ])('$from -> $to', ({ from, to }) => {
        testWithBuilds(mod => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            expect(mod.convertMany(from).to(to[1])).toBe(to[0]);
        });
    });
    describe('convert to best', () => {
        describe.each([
            { from: ['500m 3km'], to: [3.5, 'km'] },
            { from: ['500m 3km', 'metric'], to: [3.5, 'km'] },
            { from: ['500m 3km', 'imperial'], to: [2.174_799_172_830_668_6, 'mi'] },
        ])('$from -> $to', ({ from, to }) => {
            testWithBuilds(mod => {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                const result = mod.convertMany(from[0]).to('best', from[1]);
                expect(result.quantity).toBe(to[0]);
                expect(result.unit).toBe(to[1]);
                expect(result.toString()).toBe(to[0].toString() + to[1]);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC1tYW55LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udmVydC1tYW55LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFFbkQsTUFBTSxZQUFZLEdBQUcsbUJBQW1CLENBQUM7QUFDekMsTUFBTSxXQUFXLEdBQUcsa0JBQWtCLENBQUM7QUFFdkMsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7SUFDdkIsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU5RSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQ1gsSUFBSTthQUNGLFdBQVcsQ0FBQyxRQUFRLENBQUM7WUFDdEIsZ0NBQWdDO2FBQy9CLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FDakIsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ1QsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUM7WUFDbkMsR0FBRyxFQUFFLENBQ0osR0FBRztpQkFDRCxXQUFXLENBQUMsUUFBUSxDQUFDO2dCQUN0QixnQ0FBZ0M7aUJBQy9CLEVBQUUsQ0FBQyxXQUFXLENBQUM7U0FDbEIsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRTtZQUNiLE1BQU0sQ0FBQyxFQUFF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Q0FBUSxDQUFDLENBQUM7Z0JBRTFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFaEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUQsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7QmVzdH0gZnJvbSAnY29udmVyc2lvbnMnO1xuaW1wb3J0IHtwcm9kLCBkZXZ9IGZyb20gJy4uL3Rlc3QvY29udmVydCc7XG5pbXBvcnQge3Rlc3RXaXRoQnVpbGRzfSBmcm9tICcuLi90ZXN0L3dpdGgtYnVpbGRzJztcblxuY29uc3QgaW52YWxpZFZhbHVlID0gJ25vdCBhIHZhbGlkIHZhbHVlJztcbmNvbnN0IGludmFsaWRVbml0ID0gJ25vdCBhIHZhbGlkIHVuaXQnO1xuXG5kZXNjcmliZSgnZXJyb3JzJywgKCkgPT4ge1xuXHRkZXNjcmliZSgncHJvZHVjdGlvbicsICgpID0+IHtcblx0XHRleHBlY3QoKCkgPT4gcHJvZC5jb252ZXJ0TWFueShpbnZhbGlkVmFsdWUpKS50b1Rocm93RXJyb3IobmV3IFJhbmdlRXJyb3IoJycpKTtcblxuXHRcdGV4cGVjdCgoKSA9PlxuXHRcdFx0cHJvZFxuXHRcdFx0XHQuY29udmVydE1hbnkoJzEwMDBtcycpXG5cdFx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgSW52YWxpZCB1bml0XG5cdFx0XHRcdC50byhpbnZhbGlkVW5pdCksXG5cdFx0KS50b1Rocm93KFR5cGVFcnJvcik7XG5cdH0pO1xuXG5cdGRlc2NyaWJlKCdkZXZlbG9wbWVudCcsICgpID0+IHtcblx0XHR0ZXN0LmVhY2goW1xuXHRcdFx0KCkgPT4gZGV2LmNvbnZlcnRNYW55KGludmFsaWRWYWx1ZSksXG5cdFx0XHQoKSA9PlxuXHRcdFx0XHRkZXZcblx0XHRcdFx0XHQuY29udmVydE1hbnkoJzEwMDBtcycpXG5cdFx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBJbnZhbGlkIHVuaXRcblx0XHRcdFx0XHQudG8oaW52YWxpZFVuaXQpLFxuXHRcdF0pKCclcCcsIGZuID0+IHtcblx0XHRcdGV4cGVjdChmbikudG9UaHJvdyhSYW5nZUVycm9yKTtcblx0XHRcdGV4cGVjdChmbikudG9UaHJvdygvLisvKTtcblx0XHR9KTtcblx0fSk7XG59KTtcblxuZGVzY3JpYmUoJ2NvbnZlcnNpb25zJywgKCkgPT4ge1xuXHRkZXNjcmliZS5lYWNoKFtcblx0XHR7ZnJvbTogJzFtaW4gMzBzJywgdG86IFs5MCwgJ3NlY29uZHMnXX0sXG5cdFx0e2Zyb206ICc1MWggMTNtaW4gNTZzJywgdG86IFs1MSArIDEzIC8gNjAgKyA1NiAvIDYwIC8gNjAsICdob3VycyddfSxcblx0XHR7ZnJvbTogJzUxaCAxM21pbiA1NnMnLCB0bzogWzUxICsgMTMgLyA2MCArIDU2IC8gNjAgLyA2MCwgJ2gnXX0sXG5cblx0XHR7ZnJvbTogJzFtMycsIHRvOiBbMSwgJ20zJ119LFxuXG5cdFx0e2Zyb206ICcuMW0nLCB0bzogWzAuMSwgJ20nXX0sXG5cdFx0e2Zyb206ICctLjFtJywgdG86IFstMC4xLCAnbSddfSxcblx0XHR7ZnJvbTogJy0xbScsIHRvOiBbLTEsICdtJ119LFxuXHRcdHtmcm9tOiAnMC4xbScsIHRvOiBbMC4xLCAnbSddfSxcblx0XHR7ZnJvbTogJy0wLjFtJywgdG86IFstMC4xLCAnbSddfSxcblx0XSkoJyRmcm9tIC0+ICR0bycsICh7ZnJvbSwgdG99KSA9PiB7XG5cdFx0dGVzdFdpdGhCdWlsZHMobW9kID0+IHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG5cdFx0XHRleHBlY3QobW9kLmNvbnZlcnRNYW55KGZyb20pLnRvKHRvWzFdIGFzIGFueSkpLnRvQmUodG9bMF0pO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRkZXNjcmliZSgnY29udmVydCB0byBiZXN0JywgKCkgPT4ge1xuXHRcdHR5cGUgVGVzdENhc2UgPSB7XG5cdFx0XHRmcm9tOiBbdmFsdWU6IHN0cmluZ10gfCBbdmFsdWU6IHN0cmluZywgYmVzdEtpbmQ6IEJlc3QuS2luZF07XG5cdFx0XHR0bzogW3F1YW50aXR5OiBudW1iZXIsIHVuaXQ6IHN0cmluZ107XG5cdFx0fTtcblxuXHRcdGRlc2NyaWJlLmVhY2g8VGVzdENhc2U+KFtcblx0XHRcdHtmcm9tOiBbJzUwMG0gM2ttJ10sIHRvOiBbMy41LCAna20nXX0sXG5cdFx0XHR7ZnJvbTogWyc1MDBtIDNrbScsICdtZXRyaWMnXSwgdG86IFszLjUsICdrbSddfSxcblx0XHRcdHtmcm9tOiBbJzUwMG0gM2ttJywgJ2ltcGVyaWFsJ10sIHRvOiBbMi4xNzRfNzk5XzE3Ml84MzBfNjY4XzYsICdtaSddfSxcblx0XHRdKSgnJGZyb20gLT4gJHRvJywgKHtmcm9tLCB0b30pID0+IHtcblx0XHRcdHRlc3RXaXRoQnVpbGRzKG1vZCA9PiB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG5cdFx0XHRcdGNvbnN0IHJlc3VsdCA9IG1vZC5jb252ZXJ0TWFueShmcm9tWzBdIGFzIGFueSkudG8oJ2Jlc3QnLCBmcm9tWzFdIGFzIGFueSk7XG5cblx0XHRcdFx0ZXhwZWN0KHJlc3VsdC5xdWFudGl0eSkudG9CZSh0b1swXSk7XG5cdFx0XHRcdGV4cGVjdChyZXN1bHQudW5pdCkudG9CZSh0b1sxXSk7XG5cblx0XHRcdFx0ZXhwZWN0KHJlc3VsdC50b1N0cmluZygpKS50b0JlKHRvWzBdLnRvU3RyaW5nKCkgKyB0b1sxXSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fSk7XG59KTtcbiJdfQ==