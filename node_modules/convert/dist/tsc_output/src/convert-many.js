import { convert } from './convert.js';
const splitExpression = /(-?(?:\d+)?\.?\d+)(\S+)/g;
function to(unit, kind) {
    const isBest = unit === 'best';
    let result = 0;
    let resolvedUnit;
    let isFirstPass = true;
    do {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        const converted = convert(Number(this._search[1 /* MatchGroup.Quantity */]), this._search[2 /* MatchGroup.Unit */]).to(
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        isBest && !isFirstPass ? resolvedUnit : unit);
        if (isBest && isFirstPass) {
            result += converted.quantity;
            resolvedUnit = converted.unit;
            isFirstPass = false;
        }
        else {
            result += converted;
        }
        this._search = splitExpression.exec(this._value);
    } while (this._search);
    if (isBest) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return convert(result, resolvedUnit).to('best', kind);
    }
    return result;
}
/**
 * Convert several values in a string into a single unit.
 *
 * @example
 * ```ts
 * convertMany('1d 12h').to('hours') === 36;
 * ```
 *
 * @param value - The string to parse as values
 *
 * @public
 */
export function convertMany(value) {
    splitExpression.lastIndex = 0;
    const search = splitExpression.exec(value);
    if (!search) {
        if (__DEV__) {
            throw new RangeError(`value did not match expression ${splitExpression.source}`);
        }
        throw new RangeError();
    }
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    return {
        to: to.bind({
            _search: search,
            _value: value,
        }),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC1tYW55LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnZlcnQtbWFueS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBYXJDLE1BQU0sZUFBZSxHQUFHLDBCQUEwQixDQUFDO0FBT25ELFNBQVMsRUFBRSxDQUFzQixJQUFtQixFQUFFLElBQTRCO0lBQ2pGLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxNQUFNLENBQUM7SUFFL0IsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsSUFBSSxZQUF1QixDQUFDO0lBQzVCLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQztJQUV2QixHQUFHO1FBQ0YsaUVBQWlFO1FBQ2pFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sNkJBQXFCLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyx5QkFBd0IsQ0FBQyxDQUFDLEVBQUU7UUFDNUcsaUVBQWlFO1FBQ2pFLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUUsWUFBcUIsQ0FBQyxDQUFDLENBQUUsSUFBWSxDQUNqQixDQUFDO1FBRWhELElBQUksTUFBTSxJQUFJLFdBQVcsRUFBRTtZQUMxQixNQUFNLElBQUssU0FBK0MsQ0FBQyxRQUFRLENBQUM7WUFDcEUsWUFBWSxHQUFJLFNBQStDLENBQUMsSUFBSSxDQUFDO1lBQ3JFLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDcEI7YUFBTTtZQUNOLE1BQU0sSUFBSSxTQUFtQixDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQztLQUNsRCxRQUFRLElBQUksQ0FBQyxPQUFPLEVBQUU7SUFFdkIsSUFBSSxNQUFNLEVBQUU7UUFDWCxpRUFBaUU7UUFDakUsT0FBTyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQW9CLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzlEO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBRUQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQWE7SUFDeEMsZUFBZSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDOUIsTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUUzQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1osSUFBSSxPQUFPLEVBQUU7WUFDWixNQUFNLElBQUksVUFBVSxDQUFDLGtDQUFrQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUNqRjtRQUVELE1BQU0sSUFBSSxVQUFVLEVBQUUsQ0FBQztLQUN2QjtJQUVELHlFQUF5RTtJQUN6RSxPQUFPO1FBQ04sRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDWCxPQUFPLEVBQUUsTUFBTTtZQUNmLE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FBQztLQUN5QixDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7QmVzdH0gZnJvbSAnY29udmVyc2lvbnMnO1xuaW1wb3J0IHtjb252ZXJ0fSBmcm9tICcuL2NvbnZlcnQuanMnO1xuaW1wb3J0IHR5cGUge0Jlc3RDb252ZXJzaW9uLCBCZXN0VW5pdHMsIENvbnZlcnRlcn0gZnJvbSAnLi90eXBlcy9jb21tb24uanMnO1xuaW1wb3J0IHR5cGUge1VuaXR9IGZyb20gJy4vdHlwZXMvdW5pdHMuanMnO1xuXG5jb25zdCBlbnVtIE1hdGNoR3JvdXAge1xuXHQvKiogVGhlIGVudGlyZSBtYXRjaC4gKi9cblx0RnVsbCxcblx0LyoqIFRoZSBxdWFudGl0eSBvZiB0aGUgdW5pdC4gKi9cblx0UXVhbnRpdHksXG5cdC8qKiBUaGUgdW5pdC4gKi9cblx0VW5pdCxcbn1cblxuY29uc3Qgc3BsaXRFeHByZXNzaW9uID0gLygtPyg/OlxcZCspP1xcLj9cXGQrKShcXFMrKS9nO1xuXG50eXBlIENvbnZlcnRlclRoaXMgPSB7XG5cdF9zZWFyY2g6IFJlZ0V4cEV4ZWNBcnJheTtcblx0X3ZhbHVlOiBzdHJpbmc7XG59O1xuXG5mdW5jdGlvbiB0byh0aGlzOiBDb252ZXJ0ZXJUaGlzLCB1bml0OiBVbml0IHwgJ2Jlc3QnLCBraW5kPzogQmVzdC5LaW5kIHwgdW5kZWZpbmVkKSB7XG5cdGNvbnN0IGlzQmVzdCA9IHVuaXQgPT09ICdiZXN0JztcblxuXHRsZXQgcmVzdWx0ID0gMDtcblx0bGV0IHJlc29sdmVkVW5pdDogQmVzdFVuaXRzO1xuXHRsZXQgaXNGaXJzdFBhc3MgPSB0cnVlO1xuXG5cdGRvIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuXHRcdGNvbnN0IGNvbnZlcnRlZCA9IGNvbnZlcnQoTnVtYmVyKHRoaXMuX3NlYXJjaFtNYXRjaEdyb3VwLlF1YW50aXR5XSksIHRoaXMuX3NlYXJjaFtNYXRjaEdyb3VwLlVuaXRdIGFzIGFueSkudG8oXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuXHRcdFx0aXNCZXN0ICYmICFpc0ZpcnN0UGFzcyA/IChyZXNvbHZlZFVuaXQhIGFzIGFueSkgOiAodW5pdCBhcyBhbnkpLFxuXHRcdCkgYXMgbnVtYmVyIHwgQmVzdENvbnZlcnNpb248bnVtYmVyLCBCZXN0VW5pdHM+O1xuXG5cdFx0aWYgKGlzQmVzdCAmJiBpc0ZpcnN0UGFzcykge1xuXHRcdFx0cmVzdWx0ICs9IChjb252ZXJ0ZWQgYXMgQmVzdENvbnZlcnNpb248bnVtYmVyLCBCZXN0VW5pdHM+KS5xdWFudGl0eTtcblx0XHRcdHJlc29sdmVkVW5pdCA9IChjb252ZXJ0ZWQgYXMgQmVzdENvbnZlcnNpb248bnVtYmVyLCBCZXN0VW5pdHM+KS51bml0O1xuXHRcdFx0aXNGaXJzdFBhc3MgPSBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ICs9IGNvbnZlcnRlZCBhcyBudW1iZXI7XG5cdFx0fVxuXG5cdFx0dGhpcy5fc2VhcmNoID0gc3BsaXRFeHByZXNzaW9uLmV4ZWModGhpcy5fdmFsdWUpITtcblx0fSB3aGlsZSAodGhpcy5fc2VhcmNoKTtcblxuXHRpZiAoaXNCZXN0KSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcblx0XHRyZXR1cm4gY29udmVydChyZXN1bHQsIHJlc29sdmVkVW5pdCEgYXMgYW55KS50bygnYmVzdCcsIGtpbmQpO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IHNldmVyYWwgdmFsdWVzIGluIGEgc3RyaW5nIGludG8gYSBzaW5nbGUgdW5pdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnZlcnRNYW55KCcxZCAxMmgnKS50bygnaG91cnMnKSA9PT0gMzY7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgc3RyaW5nIHRvIHBhcnNlIGFzIHZhbHVlc1xuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRNYW55KHZhbHVlOiBzdHJpbmcpOiBDb252ZXJ0ZXI8bnVtYmVyLCBVbml0PiB7XG5cdHNwbGl0RXhwcmVzc2lvbi5sYXN0SW5kZXggPSAwO1xuXHRjb25zdCBzZWFyY2ggPSBzcGxpdEV4cHJlc3Npb24uZXhlYyh2YWx1ZSk7XG5cblx0aWYgKCFzZWFyY2gpIHtcblx0XHRpZiAoX19ERVZfXykge1xuXHRcdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoYHZhbHVlIGRpZCBub3QgbWF0Y2ggZXhwcmVzc2lvbiAke3NwbGl0RXhwcmVzc2lvbi5zb3VyY2V9YCk7XG5cdFx0fVxuXG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoKTtcblx0fVxuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcblx0cmV0dXJuIHtcblx0XHR0bzogdG8uYmluZCh7XG5cdFx0XHRfc2VhcmNoOiBzZWFyY2gsXG5cdFx0XHRfdmFsdWU6IHZhbHVlLFxuXHRcdH0pLFxuXHR9IGFzIENvbnZlcnRlcjxudW1iZXIsIFVuaXQ+O1xufVxuIl19