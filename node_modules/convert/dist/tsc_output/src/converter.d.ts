import { conversions } from 'bundled-conversions';
import * as Conversions from 'conversions';
import type { BestConversion, BestUnits, SimplifyQuantity } from './types/common.js';
import type { Temperature, Unit, UnitToFamily } from './types/units.js';
type ConverterThis<Q extends number | bigint, U extends Unit> = {
    _quantity: Q;
    _from: U;
    _fromUnit: (typeof conversions)[U];
    _isUsingBigInts: Q extends bigint ? true : false;
    _isConvertingTemperature: U extends Temperature ? true : false;
};
/**
 * Convert a measurement to the best unit for display.
 *
 * @param to - The string `best`
 * @param kind - The set of units to use (defaults to `'metric'`)
 *
 * @returns An object with a `quantity` property of the `unit` unit, which can be casted to a string using the `toString()` method
 */
export declare function to<Q extends number | bigint, U extends Unit, K extends Conversions.Best.Kind = Conversions.Best.Kind>(this: ConverterThis<Q, U>, to: 'best', kind?: K | undefined): BestConversion<Q, BestUnits<UnitToFamily[U], K>>;
/**
 * Convert a quantity of one unit into a new unit
 *
 * @param to - The unit you want to convert to
 *
 * @returns The converted value
 */
export declare function to<Q extends number | bigint, U extends Unit>(this: ConverterThis<Q, U>, to: U): SimplifyQuantity<Q>;
export {};
