import { conversions } from 'bundled-conversions';
import * as Conversions from 'conversions';
import { Indexes } from 'optimized-conversions';
import { to } from './converter.js';
/**
 * Convert a given quantity of a unit into another unit.
 *
 * @param quantity - The quantity of the `from` unit you want to convert
 * @param from - The unit you are converting from
 *
 * @returns An object you can use to convert the provided quantity
 *
 * @public
 */
export function convert(quantity, from) {
    // This causes @babel/runtime to emit a _typeOf function with symbol backwards compatibility
    // Writing typeof quantity === 'bigint' doesn't trigger it for some reason
    const quantityType = typeof quantity;
    const isUsingBigInts = (quantityType === 'bigint');
    if (!isUsingBigInts && quantityType !== 'number') {
        if (__DEV__) {
            throw new TypeError(`Expected quantity to be a number or a bigint, got ${quantityType}`);
        }
        throw new TypeError();
    }
    const fromUnit = conversions[from];
    if (!fromUnit) {
        if (__DEV__) {
            throw new RangeError(`${from} is not a valid unit`);
        }
        throw new RangeError();
    }
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    return {
        to: to.bind({
            _quantity: quantity,
            _from: from,
            _fromUnit: fromUnit,
            _isUsingBigInts: isUsingBigInts,
            _isConvertingTemperature: fromUnit[Indexes.Conversion.Family] === Conversions.Id.Temperature,
        }),
    };
}
//# sourceMappingURL=data:application/json;base64,