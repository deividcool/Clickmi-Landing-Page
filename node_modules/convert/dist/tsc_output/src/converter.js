import { KelvinNames } from 'conversions';
import { bestUnits, conversions, temperatureDifferences } from 'bundled-conversions';
import * as Conversions from 'conversions';
import { Indexes } from 'optimized-conversions';
import { convert } from './convert.js';
import { assert, assertType, isType } from './assert.js';
// eslint-disable-next-line complexity
export function to(to, kind = 'metric') {
    if (this._from === to) {
        // This is ok since we have already validated the type of quantity
        return this._quantity;
    }
    // TODO: Extract to function
    if (to === 'best') {
        // eslint-disable-next-line no-prototype-builtins
        if (!bestUnits.hasOwnProperty(kind)) {
            if (__DEV__) {
                throw new RangeError(`${kind} is not a valid best conversion kind`);
            }
            throw new RangeError();
        }
        const bestUnitKind = bestUnits[kind];
        const family = bestUnitKind[this._fromUnit[Indexes.Conversion.Family]];
        const baseUnit = family[0][Indexes.Best.Sym];
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        let quantity = convert(this._quantity, this._from).to(baseUnit);
        const absQuantity = quantity < 0 ? -quantity : quantity;
        let bestUnit = baseUnit;
        // eslint-disable-next-line unicorn/no-for-loop, @typescript-eslint/prefer-for-of
        for (let i = 0; i < family.length; i++) {
            const best = family[i];
            if (absQuantity >= best[Indexes.Best.Value]) {
                bestUnit = best[Indexes.Best.Sym];
            }
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        quantity = convert(quantity, baseUnit).to(bestUnit);
        return {
            quantity,
            unit: bestUnit,
            toString: this._isUsingBigInts
                ? () => (quantity + bestUnit)
                : (toFixed) => ((toFixed === undefined ? quantity : quantity.toFixed(toFixed)) + bestUnit),
        };
    }
    const toUnit = conversions[to];
    if (__DEV__) {
        if (!toUnit) {
            throw new RangeError(`${to} is not a valid unit`);
        }
        const meters = 'm';
        if (
        // Time -> meters
        (this._fromUnit[Indexes.Conversion.Family] === Conversions.Id.Time && to === meters) ||
            // Meters -> time
            (toUnit[Indexes.Conversion.Family] === Conversions.Id.Time && this._from === meters)) {
            throw new RangeError([
                `No conversion could be found from ${this._from} to ${to}.`,
                'Also, are you trying to convert quantities of time?',
                'Because "m" is treated as meters, not minutes.',
                'You probably want to use the "min" unit instead.',
            ].join(' '));
        }
    }
    // @ts-expect-error This throws if toUnit is undefined
    if (this._fromUnit[Indexes.Conversion.Family] !== toUnit[Indexes.Conversion.Family]) {
        if (__DEV__) {
            throw new RangeError(`No conversion could be found from ${this._from} to ${to}`);
        }
        throw new RangeError();
    }
    assert(toUnit);
    if (this._isUsingBigInts && isType(this._quantity)) {
        // TODO: If quantity is a bigint return a different Converter<T> instead of checking it here - this may not increase performance if TurboFan is already optimizing for different code paths
        if (__DEV__) {
            try {
                BigInt(this._fromUnit[Indexes.Conversion.Ratio] / toUnit[Indexes.Conversion.Ratio]);
            }
            catch {
                throw new TypeError(`Conversion for ${this._from} to ${to} cannot be calculated as a BigInt because the conversion ratio is not an integer`);
            }
        }
        if (this._from in temperatureDifferences || to in temperatureDifferences) {
            if (__DEV__) {
                const reason = this._from in temperatureDifferences ? this._from : to;
                throw new RangeError(`Conversion for ${this._from} to ${to} cannot be calculated as ${reason} has a conversion difference which cannot be converted with bigints`);
            }
            throw new RangeError();
        }
        // Difference is intentionally excluded as there is never a case where you could convert a temperature to a different temperature as integers
        return (this._quantity *
            // Converting each ratio to bigints would make the most sense here but it ends up with unhelpful return values (ex. 1_000_000n B -> MB === 0n instead of 1n)
            // It's mostly okay to do this since ratios are already `number`s so we aren't losing a ton of precision, just if you have 2 very precise ratios that are multiplied together and exceed the precision of a `number`
            BigInt(this._fromUnit[Indexes.Conversion.Ratio] / toUnit[Indexes.Conversion.Ratio]));
    }
    assertType(this._quantity);
    if (this._isConvertingTemperature && isType(this._from) && isType(to)) {
        switch (to) {
            case KelvinNames.K:
            case KelvinNames.kelvin:
            case KelvinNames.kelvins: {
                if (this._from in temperatureDifferences && isType(this._from)) {
                    return ((this._quantity + temperatureDifferences[this._from]) * this._fromUnit[Indexes.Conversion.Ratio]);
                }
                return (this._quantity * this._fromUnit[Indexes.Conversion.Ratio]);
            }
            default: {
                break;
            }
        }
        switch (this._from) {
            case KelvinNames.K:
            case KelvinNames.kelvin:
            case KelvinNames.kelvins: {
                if (to in temperatureDifferences && isType(to)) {
                    return (this._quantity / toUnit[Indexes.Conversion.Ratio] - temperatureDifferences[to]);
                }
                return (this._quantity / toUnit[Indexes.Conversion.Ratio]);
            }
            default: {
                break;
            }
        }
        return convert(convert(this._quantity, this._from).to('K'), 'K').to(to);
    }
    return (this._quantity * (this._fromUnit[Indexes.Conversion.Ratio] / toUnit[Indexes.Conversion.Ratio]));
}
//# sourceMappingURL=data:application/json;base64,