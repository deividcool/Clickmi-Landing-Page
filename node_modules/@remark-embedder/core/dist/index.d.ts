import { type Plugin } from 'unified';
type GottenHTML = string | null;
type TransformerConfig<Type = unknown> = Type;
type Transformer<ConfigType = unknown> = {
    getHTML: (url: string, config?: TransformerConfig<ConfigType>) => GottenHTML | Promise<GottenHTML>;
    name: string;
    shouldTransform: (url: string) => Promise<boolean> | boolean;
};
type TransformerInfo = {
    url: string;
    transformer: Transformer<unknown>;
    config: TransformerConfig;
};
type RemarkEmbedderOptions = {
    cache?: Map<string, GottenHTML> | {
        get(key: string): Promise<GottenHTML>;
        set(key: string, value: GottenHTML): Promise<void>;
        [key: string]: unknown;
    };
    transformers: Array<Transformer<any> | [Transformer<any>, TransformerConfig]>;
    handleHTML?: (html: GottenHTML, info: TransformerInfo) => GottenHTML | Promise<GottenHTML>;
    handleError?: (errorInfo: {
        error: Error;
        url: string;
        transformer: Transformer<unknown>;
        config: TransformerConfig;
    }) => GottenHTML | Promise<GottenHTML>;
};
declare const remarkEmbedder: Plugin<[RemarkEmbedderOptions]>;
export default remarkEmbedder;
export type { RemarkEmbedderOptions, Transformer, TransformerInfo };
