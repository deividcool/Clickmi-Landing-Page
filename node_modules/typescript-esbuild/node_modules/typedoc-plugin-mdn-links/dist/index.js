"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const typedoc_1 = require("typedoc");
const canvas_1 = require("./canvas");
const css_1 = require("./css");
const dom_1 = require("./dom");
const globalObjects_1 = require("./globalObjects");
const typescript_1 = require("./typescript");
const webaudio_1 = require("./webaudio");
const version = typedoc_1.Application.VERSION.split(/[\.-]/);
const supportsObjectReturn = +version[1] > 23 || +version[2] >= 26;
function load(app) {
    const failed = new Set();
    app.options.addDeclaration({
        name: "resolveUtilityTypes",
        defaultValue: true,
        help: "[typedoc-plugin-mdn-links]: Resolve references to Partial, Omit, etc to the TypeScript website.",
        type: typedoc_1.ParameterType.Boolean,
    });
    const resolvers = [
        globalObjects_1.resolveGlobalName,
        dom_1.resolveDomName,
        css_1.resolveCssName,
        canvas_1.resolveCanvasName,
        webaudio_1.resolveWebAudioName,
    ];
    function resolveName(name) {
        for (const res of resolvers) {
            const result = res(name);
            if (result)
                return result;
        }
    }
    app.converter.on(typedoc_1.Converter.EVENT_BEGIN, () => {
        if (app.options.getValue("resolveUtilityTypes")) {
            resolvers.push(typescript_1.resolveTsType);
        }
    });
    app.converter.addUnknownSymbolResolver((declaration) => {
        if (declaration.moduleSource === "typescript" ||
            (!declaration.moduleSource &&
                declaration.resolutionStart === "global")) {
            const name = declaration.symbolReference?.path
                ?.map((path) => path.path)
                .join(".");
            if (!name)
                return;
            const result = resolveName(name);
            if (!result && !failed.has(name)) {
                failed.add(name);
                app.logger.verbose(`[typedoc-plugin-mdn-links]: Failed to resolve type: ${name}`);
            }
            if (supportsObjectReturn && result) {
                return {
                    target: result,
                    caption: name,
                };
            }
            return result;
        }
    });
}
exports.load = load;
